0:00 Hi everyone, welcome to our event. This
0:02 event is brought to you by Data Docs
0:03 Club which is a community of people who
0:05 love data. We have weekly events and
0:07 today is one of such events. If you want
0:09 to find out more about the events we
0:11 have, there is a link in the
0:13 description. Go there, click on it and
0:14 you'll see all the events we have in our
0:16 schedule. Tomorrow, for example, we have
0:19 a webinar where I will talk about a pet
0:22 project of mine that I did recently
0:23 about turning pictures into horror
0:26 stories. This is a project I and my son
0:28 did. So join if you want if you want to
0:32 listen about this project. Um so the
0:34 link is in description. Then do not
0:37 forget to subscribe to our YouTube
0:39 channel. This way you'll get um you'll
0:41 stay up to date with all our streams
0:43 that we have. And last but not least, we
0:45 have an amazing Slack community where
0:47 you can hang out with other data
0:49 enthusiasts. During today's interview,
0:51 you can ask any question you want. There
0:53 is a pinned link in the live chat.
0:56 Um, yeah, I can see it on my phone. So,
0:59 click on that link, ask your questions,
1:01 and we will be covering these questions
1:03 during the
1:04 interview. So, that's the usual intro I
1:09 do. Think if if you were to wake me up
1:12 in the middle of the night and ask to do
1:15 this intro, I would probably do this
1:18 hopefully. Uh, so if you're ready, we
1:21 can start. Yeah, sounds good. I can see
1:23 that you're nearly at 60,000
1:24 subscribers. So, uh, that's pretty
1:26 exciting. Yeah, thank you. So, I think
1:29 courses help.
1:32 Okay, so let's start.
1:35 Um, this week we'll talk about um well,
1:38 many things. We'll talk about developer
1:40 advocacy. We'll talk about organizing
1:42 hackathons. We'll talk about Will's
1:44 career. And uh well I'm getting off the
1:49 script now cuz we have a special guest
1:50 Will about whose career we talk we will
1:53 talk here and Will um you probably know
1:57 will if you took our recent data
1:59 engineering course. Will is a developer
2:01 advocate at Kestra and Kestra is a
2:04 workflow orchestr orchestration platform
2:07 and uh Will was doing I think it was uh
2:11 module number two right? Yes, about
2:14 workflow orchestration. Previously,
2:16 we'll built an open source education
2:19 plat program programs to help um um
2:23 developers to start their first
2:26 contribution in open source and he
2:28 creates technical videos um and
2:31 documentation and we'll also talk about
2:33 his work today on this um on this
2:36 interview. Welcome Will. It's pleasure
2:38 to have you. Thank you for having me.
2:40 know super excited to uh sort of dive
2:42 into a little bit of some of the things
2:43 you just discussed
2:45 and uh the questions for today's
2:47 interview are prepared by Johanna Byer.
2:49 Thanks Johanna as always for your help.
2:51 And at the beginning I warned that I
2:54 want to go off the script a little bit
2:57 and the first question we always ask is
3:00 about the career journey but I really
3:02 like your videos and um previously when
3:06 we had office hours in during the course
3:09 the data engineering course and if you
3:10 haven't checked this course check it out
3:13 even though the course is already uh
3:15 finishing but you can always go and
3:17 check module number two which was about
3:19 cast and the whole course
3:21 So, I really like the quality of your
3:24 picture and like all the little things
3:26 you have on your background and the
3:29 microphone and the headset. So, I the
3:33 question is um tell us about your setup.
3:37 What do you actually have like how did
3:39 you manage to get such a good picture
3:42 quality? Yeah. So, it's been sort of a a
3:44 slow slowly evolving setup over the
3:47 years. Ever since sort of co when
3:49 everything went online and everyone
3:51 started to go, "Oh, let me make nice
3:53 setups." I was like, "That sounds quite
3:55 cool." Um, and we'll talk a little bit
3:56 more about that later about how I have
3:58 been doing videos in all different forms
4:00 for a few years now. Um, so I decided to
4:03 try and learn photography and I got a
4:05 little camera. It's just a Sony
4:07 mirrorless camera, but the key thing is
4:09 it has a HDMI output. So, um, I've just
4:12 got a very simple prime lens, which
4:13 means the background's nice and blurry.
4:15 And I have that plugged into my laptop,
4:17 uh, which and it just comes up as a
4:19 webcam. Nice and simple. But for those
4:21 of you who, uh, are curious what makes
4:23 video look good, it's not the camera.
4:25 It's normally the lighting. And so, I've
4:27 also got a nice light here just off to
4:29 the side, um, which lights me up nicely.
4:32 Some lights behind me, which just helps
4:33 to separate me from the background. And
4:35 because the background behind me is at a
4:37 45 degree angle, it creates a bit of
4:39 depth too, which helps to um improve the
4:43 quality and make it feel a little bit
4:44 more um professional. Um but the reality
4:46 is is I have a camera just clamped to
4:48 the back of my monitor. So every time I
4:51 shake my desk, the camera also shakes.
4:53 Um but it means that uh it's the the key
4:56 thing with the setup is that when I make
4:58 videos for Kestra, I want there to be as
5:00 little friction as possible to pressing
5:02 record. So, all I've got to do is turn
5:04 the light on, turn the camera on, and
5:06 then I'm ready to go. The camera is
5:07 right above my monitor, so when I'm
5:09 doing demos, it's easy just to look up
5:11 at the camera and look down at what I'm
5:12 doing. Um, and there's nothing in the
5:14 way. There's nothing worse than having
5:15 all these different things in your desk
5:17 in the way. I used to put the camera on
5:19 a tripod in front of my monitor, but
5:21 then I couldn't actually see the demo,
5:22 so I'm constantly trying to like lean
5:24 around the camera to see what I was
5:26 doing. That was awful. So, um it's very
5:29 simple but very effective is like the uh
5:31 the premise of the setup. And the mic um
5:35 like your voice is uh like it captures
5:38 your voice
5:39 quite well. So, what's the what's the
5:43 mic? So, I have a road mic. Uh it's an
5:45 XLR microphone that's plugged into a
5:47 little preamp that then just plugs into
5:48 my computer. Um it's quite a requires a
5:51 lot of power, so the closer you get it
5:53 to your mouth, the more sort of radio
5:54 style it sounds. So, um, I used to try
5:57 and keep the microphone out of the shot,
5:59 but the issue was then you lose some of
6:01 that clarity, which is I hear some of
6:04 the reasons people like watching the
6:05 videos is the clarity of my voice. So,
6:08 uh, the closer I got it basically, the
6:10 more people who are happy. So, um, and
6:12 the big sock just helps with, uh, I end
6:14 up a lot of the way I say words cause
6:17 little crackles and pops in the
6:18 microphone, which is no nice, not nice
6:19 for anyone's ears. So um that helps to
6:22 resolve that too while keeping it all
6:24 quite simple looking and s you know
6:27 quite
6:28 clean. I think the hardest thing, at
6:30 least for me, it seems the hardest thing
6:34 is the lighting. Like do you how did
6:39 you like was it through experimentation
6:41 that you came up uh with this setup that
6:44 you have right now or did you need to
6:46 learn something or how did you actually
6:48 how did you actually put the lights in
6:50 the places where they are right now?
6:52 Yeah, it's sort of uh I've had so I've
6:55 since co when I started doing this I've
6:58 lived in a few different places and uh
7:00 I've had the same desk but I've had like
7:03 maybe less monitors or more space or
7:05 whatever. Um so you normally think to
7:08 put the microphone sorry the light
7:10 directly behind your camera or like a
7:12 ring light or something but the issue is
7:14 that sort of loses a lot of depth in
7:16 your face. Uh, I learned that if you're
7:18 doing photography with lighting, you
7:20 want to have the light about a 45 degree
7:22 angle. It creates a nice contour on your
7:24 face and a little bit of shadow, which
7:26 just helps to create a little bit of
7:27 depth. Um, and so luckily my desk had a
7:32 spot right next to where my microphone's
7:33 clamped that's right next to my monitor.
7:35 It's very cramped in this side of my
7:37 desk, but it does work. And uh the light
7:40 I've sort of moved it a little bit left
7:41 to right. But I found that this works
7:43 quite well of uh lighting me up but also
7:46 not just completely washing me out. But
7:48 I do have to make sure that my as a
7:50 window next to the light too. And I used
7:52 to use just natural light but natural
7:54 light's not reliable especially in the
7:55 winter when it gets dark at like 3 p.m.
7:57 Okay. In London. Yeah. Yeah. So you
8:01 probably have even less light than than
8:03 we in Berlin. Exactly. Um, so I close
8:06 the blind and it means now I can record
8:08 videos at any time of day. But if I open
8:10 the blind, that will light the
8:12 background more, but then it sort of
8:13 makes me more in a shadow. So it's
8:15 important to uh make everything
8:17 artificial cuz then uh it means well it
8:20 just means that you know what you're
8:21 going to get out of the video every time
8:23 you make it. There's nothing worse than
8:25 one video you record looks really good
8:27 cuz the light the natural light was
8:29 perfect, but then another you can tell
8:31 that it's not quite right or I'm a
8:32 little bit dark because the sun started
8:34 to set or whatever. So, um this has
8:37 definitely been the most reliable setup
8:39 and uh yeah, I've had a bunch of this
8:40 stuff now for a few years and it it
8:43 works very well. I could add another
8:44 light. Sometimes having two lights from
8:46 different angles is good, but I like the
8:48 simplicity. It's very simple, very
8:50 effective, and like you say, people
8:52 think it looks very sharp and uh good.
8:55 So, if people think it looks good, then
8:57 I don't see a reason to change it
8:58 anymore. Yeah. Yeah. And from what I
9:01 heard, your hobby, photography, helped
9:03 with your setup, with setting up things
9:06 exactly as they are with lights and so
9:08 on. Yeah, exactly. I just used to think
9:11 that to make a co, you know, photography
9:13 was about buying a lens that could uh
9:16 have a wide aperture which co that
9:17 blurry background. Um, I learned very
9:20 quickly that lighting actually is the
9:22 main thing. The blurry background is
9:24 lovely and all, but lighting actually is
9:25 what makes it look good. And I learned
9:27 that the hard way cuz I didn't have a
9:28 light for ages. And uh, the videos
9:30 looked better, but it just kind of I
9:33 mean, a lot of people could get away
9:35 with just using a webcam and a light and
9:37 you'll notice the quality improve. Um,
9:39 it so it's not all about the camera. I
9:42 mean, the camera definitely helps when
9:43 you've got the lighting, but the camera
9:45 on its own, especially once you pump it
9:46 through something like Zoom, you're
9:48 probably not going to really notice the
9:49 difference over a decent webcam.
9:51 Especially like laptops these days come
9:52 with pretty good webcams built in. Not
9:55 mine, but yeah, Max usually do. Yeah,
9:59 they have a Windows laptop which is
10:01 Razer. So, they it's quite powerful
10:03 inside, but the CA is like I don't know.
10:06 Yeah, they decided to save some money, I
10:09 guess, on the come. Anyways, most of
10:11 laptops, especially Max, they they do.
10:14 Yeah. Anyways, we got off the script.
10:16 Amazing setup. Thanks for telling us.
10:18 Um, I I am kind of tempted to go deeper
10:21 and ask you about like all these uh Lego
10:25 uh things you have, but like we will not
10:27 have time for the actual
10:28 content this way. Uh, and if you're
10:32 listening to a podcast and you don't see
10:34 the video, maybe just go to YouTube and
10:36 check the beginning to see why I
10:39 actually I asked Will about his setup
10:41 cuz it looks very professional and it is
10:44 very professional. But yeah, back to the
10:46 podcast. So, usual question I always ask
10:49 at the beginning is um I ask the guest
10:54 to tell us about their career journey.
10:56 So tell us how did you start like what
10:59 did you do to uh arrive at the point
11:01 where you are right now? Yeah. So it all
11:04 started back in uh just before 2018 when
11:07 I was deciding to go to university about
11:10 what to study. Now I done a bit of
11:12 programming but I wasn't 100% sold on
11:15 doing that as a career. Uh engineering
11:18 was also quite appealing to me. So I was
11:20 sort of weighing my options between the
11:22 two of them. But then uh I started
11:23 getting really into programming at a
11:25 school module and decided you know what
11:27 computer science actually sounds really
11:28 interesting. So I decided to go study a
11:31 computer science degree. Now it wasn't
11:33 the degree that really uh I mean I just
11:35 thought I was going to go through
11:36 university. I would find out what niche
11:39 I liked and go and become a software
11:40 developer like most people who do a
11:42 computer science degree. Um but what I
11:44 did was I started getting involved with
11:46 these things called hackathons. Now I
11:48 hadn't really uh heard much about them.
11:50 didn't really know what they were but I
11:52 really really enjoyed them and ended up
11:53 going to five in my first year and then
11:56 getting involved in organizing them in
11:57 my second and third year and uh from
12:00 that point onwards I got involved with
12:02 organizations who helped run the
12:04 hackathons and in co they then started
12:07 to branch out and build programs to help
12:09 students contribute to open source as a
12:12 result of them losing their internships
12:14 they could still get valuable experience
12:16 by contributing to these large open-
12:18 source projects so what turned into what
12:20 was supposed to be a 12week contract in
12:24 the summer turned into part-time while I
12:27 finished my degree then into a full-time
12:29 job for three or so years. And so, uh,
12:33 yeah, that was not what I had in, you
12:35 know, when I was at university, I didn't
12:37 expect to be not a programmer. I mean,
12:39 it was still very much in tech, but, um,
12:42 very different angle to it. But then as
12:44 I was getting, you know, after doing
12:45 this for several years, running multiple
12:47 iterations of these open source
12:48 programs, I still sort of had that itch
12:50 for a more technical role. This role was
12:53 uh more around helping others do
12:56 technical stuff and teaching them some
12:57 technical stuff, but it was very entry
12:59 level. And so the word developer
13:02 advocate and devril had been thrown
13:04 around a lot and I met people who worked
13:07 in it um cuz they often work with
13:09 hackathons and it seemed like sort of a
13:11 natural sort of the ne the best next
13:14 step. So I started to look into that and
13:16 asking people I had met on my way about
13:18 how do I want to best go around that and
13:20 that's sort of where I bumped into
13:22 Kestra. Um Anna and I just sort of
13:24 bumped into each other on LinkedIn. and
13:25 Anna is our product lead at Kestra. And
13:28 uh before I knew it, I was having a chat
13:29 with them, learning a bit more about
13:31 Kestre, uh understanding what is Kestre
13:34 cuz uh at the time that wasn't a very
13:36 clear thing for them, but that was part
13:38 of the reason for hiring a developer
13:39 advocate was to make that clearer. Um
13:42 and uh yeah, I've been doing that now
13:44 actually a year as of last week. And uh
13:46 yeah, it's been amazing to be able to uh
13:49 continue doing the things I loved in the
13:51 open source uh program world, but also
13:54 being able to do more of that sort of uh
13:56 working more with a technical product,
13:58 doing technical demos and uh teaching
14:00 people how to use it.
14:03 Congratulations on your work
14:04 anniversary. Thank you. Okay. Uh we will
14:08 definitely go into developer advocacy
14:10 and I'll ask you more about that. Um,
14:13 but I'm really curious about your
14:15 hackathon experience. First of all,
14:17 would you recommend anyone who is doing
14:20 their first year of university to do as
14:23 many hackathons as possible or would you
14:25 rather now looking back suggest them
14:27 that they should focus on their studies?
14:30 Uh, well, I would say the most valuable
14:32 things I learned in my first year of
14:34 university were at hackathons. For
14:36 example, I learned how to actually use
14:38 Git and how to actually deal with merge
14:41 conflicts and get things merged together
14:43 so they actually work, which was
14:44 something that like we sort of touched
14:46 on at university but never really
14:47 understood. And that's a skill that as
14:50 you can imagine has been very very
14:51 helpful in my career. Whereas at
14:54 university, your git best practices sort
14:56 of matter less. But at the hackathon
14:58 where we're trying to work as a team,
15:00 we're trying to get all this stuff
15:01 merged together. You know, that was
15:02 something I learned very uh very quickly
15:05 because I had to. It was one of those
15:06 things where to get this to work, we
15:08 need to learn these things pretty
15:09 quickly. Uh I also learned how to build
15:12 actual projects which is something I
15:14 noticed a lot of my peers at university
15:16 struggled with too where often they
15:19 would understand the concepts but they
15:21 wouldn't necessarily know how to combine
15:22 them all together to create like a full
15:24 ready working program and then deploy
15:26 that which is again something that's
15:28 proved very valuable you know in the
15:30 world of work where at university it's
15:32 not really something that's touched on.
15:34 So I guess the summary is hackathons
15:36 taught me a lot of those real life
15:38 engineering skills that university
15:40 doesn't really touch on. Um but saying
15:42 that I did wouldn't say that university
15:44 was a waste of time because a lot of
15:46 that theory is very useful um to give
15:49 you that sort of grounding that I guess
15:52 a lot of these vibe coders and stuff
15:53 maybe don't have these days where they
15:55 don't necessarily realize why we have
15:58 all these different things and why they
15:59 all fit together. Even if you don't use
16:01 them, it's useful to have that context.
16:04 Okay. So, hackathons were definitely
16:06 useful. Yes, 100%. Would recommend. And
16:10 how did you actually start organizing
16:12 them? Like you took you said you took
16:14 part into five of them first year. You
16:17 learned a lot. You learned about Git.
16:19 You learned about how to put the
16:20 practice, how to put the theory you
16:23 learn at university into practice. Uh
16:26 but how did it did it actually happen
16:28 that you started organizing once because
16:30 the it's very different right being a
16:33 participant and being an organizer
16:34 because when you're you learn when you
16:36 organize you learn but you learn other
16:39 things right like how to uh run projects
16:42 like how to run things so the the set of
16:45 skills are quite different. So how did
16:47 you become an organizer and what you
16:50 learned from that? Yeah, I guess like
16:53 after doing five hackathons in my first
16:55 year, I definitely felt I guess a level
16:58 of burnout like once you've done that
16:59 many uh you kind of the fun sort of
17:03 starts to sort of fade away a little bit
17:05 and I um had knew the people who'd
17:07 organized my local hackathon. I'd been
17:09 in because I'd been going to so many I
17:11 had been involved sort of got part of
17:13 that circle of uh very core hackathon
17:16 people and they asked if I wanted to get
17:18 involved and uh you know being able to
17:21 help take what helped me so much in that
17:24 first year and uh help more people and
17:27 be able to increase you know I found it
17:30 valuable but there was definitely things
17:31 I felt that was missing and so to be
17:33 able to come and fill those gaps was
17:34 something I felt was very valuable but
17:37 also um you a good opportunity to learn
17:39 some new skills. And they often say as
17:41 well, I guess maybe this was me thinking
17:43 a bit naively of they often say that the
17:45 people who organize the hackathons are
17:47 the ones who like get a good step up in
17:49 their careers cuz they learn useful
17:51 skills like how you know working with
17:53 other people, the skills beyond just
17:56 programming, right? A lot of those soft
17:57 skills that end up being very valuable
18:00 uh when you're working with a team of
18:02 people where um I mean the stereotype is
18:05 that developers don't have the best soft
18:06 skills in the world. I don't think
18:08 that's necessarily true, but um anything
18:10 you can do to work on those is
18:11 definitely a win.
18:13 Yeah. Right. But the the set of skills
18:15 again is a bit different, right? So then
18:17 yes, you can organize something, but uh
18:19 then perhaps you're not as good uh as
18:22 somebody who's like I don't know, let's
18:24 say we take computer science and some
18:26 algorithms, right?
18:29 If you spend time practicing them,
18:32 mastering them, then you know the
18:34 better, right? If you spend time
18:35 organizing hackathons, you know how to
18:37 organize hackathons, but you don't
18:38 necessarily have this depth, I guess,
18:41 technical depth.
18:43 You see what I mean? So when you spend
18:44 time on one thing, you don't necessarily
18:46 improve in the other thing. And this is
18:48 so the reason I'm bringing this up is
18:49 because this is something I feel myself.
18:52 When I was a data scientist, I was doing
18:54 a lot of hands-on stuff. Now I'm
18:55 organizing courses. I'm organizing
18:57 events. And I'm not technical anymore.
18:59 Like at least compared to the level I
19:01 worked before. And I'm like okay I feel
19:03 like I'm missing out cuz like all these
19:05 people they're continuing their career
19:08 as data scientists and I'm doing a
19:10 different thing right so okay I become
19:12 good at teaching but like I become worse
19:15 at data science so what's what do you
19:18 think about that like should I worry
19:20 about these things well that was
19:21 something I worried about when I was
19:23 working on the mlh fellowship the open
19:26 source program because I felt the same
19:28 way that the longer I spent working on
19:30 it the less technical I was getting. And
19:32 at first I was I was content with that,
19:34 right? Because the value that you get
19:37 from organizing something that helps
19:39 people is a value that like a feeling
19:42 that you can't necessarily get from
19:44 doing those hard technical roles. So for
19:47 the first little while, right, it felt
19:49 good and it didn't matter to me that I
19:51 was I was, you know, you still thinking
19:53 about it, but you you're going to if
19:55 someone asked you to do something
19:56 difficult, you'd be like, I wouldn't
19:57 know how to do that. I'm not the best
19:59 person to ask.
20:01 Um so I guess sort of the the hackathon
20:05 going into hackathon organizing right at
20:07 the time I didn't think too much of it
20:09 because you because you know so little
20:12 then as well uh it doesn't really feel
20:14 like a big deal but now after doing it
20:16 as a career I definitely felt uh a gap
20:20 right that there was definitely
20:21 something that was missing which is part
20:23 of the reason for moving to Devril and I
20:26 mean even to a degree Devril still
20:28 potentially has that that risk as well
20:30 of some tools that you might work on are
20:34 not super technical or very niche and
20:36 very in a certain area and so you might
20:38 not get to uh necessarily touch all the
20:41 skills that you want. Something that I
20:42 like about Kestra is it's such a
20:44 versatile product that I kind of get the
20:47 opportunity to touch everything rather
20:49 than just one very specific area of
20:52 tech. Um but yeah, I think it's a it's a
20:55 difficult balance and you've got to
20:56 figure out what do you value more? Or do
20:59 you care about being super technical or
21:01 do you care about the you know helping
21:04 others become super technical? It's uh
21:06 depends on what matters most to you. I
21:09 guess also developer advocacy is a good
21:12 blend of both technical and nontechnical
21:15 work because then you can see okay like
21:18 I enjoy doing technical stuff more and
21:20 then you can slowly move to that
21:23 direction right so you can say okay now
21:25 uh I don't know if it applies to your
21:27 particular case or if you ever thought
21:31 about this but let's say at kra you
21:33 could start contributing more to the
21:35 internal product rather than you know
21:37 working on theation
21:39 I don't know if it's possible but
21:40 perhaps or you say yeah I enjoy the
21:43 nontechnical work more and then maybe
21:45 you um do the community stuff like talk
21:49 to the user collect feedback um and
21:52 things like that right so I I think it's
21:53 a very nice blend of both technical and
21:56 nontechnical work yeah no definitely uh
22:00 the sort of the beauty of Castra being
22:02 such a small company is that um every
22:04 month's a bit different the issue with
22:06 the open source program was we ran three
22:07 a year And so it was very routinely of
22:10 we do this program for 12 weeks, there's
22:11 a gap in between and then we do it
22:13 again. And it just felt very repetitive
22:15 and uh some people loved that sort of
22:17 thing whereas and I liked it at first
22:20 when when the economy was doing well and
22:22 companies wanted to spend money on these
22:24 initiatives. Uh we were you know
22:26 bringing up new courses you know we did
22:28 a production engineering one so like
22:30 DevOps style course we did a web 3
22:32 course. So it was cool to like branch
22:34 into these different things, right? But
22:36 uh the thing that I like about Kestra is
22:38 that um I'm not like necessarily just
22:41 writing documentation every month. Like
22:42 we did the Zoom camp in January, right?
22:44 And that was very different to what I
22:46 was doing in March for example. And uh I
22:50 guess that's sort of the I guess if I
22:52 worked at a bigger company with Devro
22:53 and there's big team of developer
22:55 advocates, you'd maybe be a little bit
22:56 more uh you'd have your specialized
22:59 area. But um the variety I guess is
23:02 allows you like so you know if I would
23:04 prefer to do some more technical stuff
23:06 then I can sort of dive down that route.
23:08 If I want to do more community
23:09 orientated I can do that. It's sort of a
23:11 a nice blend of the two and I can sort
23:13 of like you say lean into one or the
23:15 other as I like
23:18 and uh I still see you help uh our
23:21 course participants. So I still see your
23:24 user picture in our Slack. So amazing.
23:26 Thanks a lot for doing that. uh but I
23:28 want to go back a little bit again to
23:30 hackathons.
23:33 So let's say I want to organize a a
23:36 hackathon and this is actually not a
23:37 hypothetical question cuz we actually
23:40 want to organize a hackathon in data
23:42 talks club. So let's say let's talk
23:44 hypothetically I want to organize a
23:47 hackathon. How do you actually do this?
23:49 Like what are them things I should
23:51 consider? What are the moving parts like
23:52 how to come up with ideas? Um
23:55 yeah. No, I want to organize one, but
23:58 like what to do? I have no idea. Yeah, a
24:01 hackathon's sort of uh it's kind of
24:05 got a few key parts to it, I guess. The
24:08 first part is the the building part,
24:11 right? The actually building your
24:13 project. The other key part is the
24:15 demoing and uh sort of presentation
24:19 part. Um, now typically the way that the
24:22 hackathons I ran as a student were the
24:26 there would be 24 hours uh one overnight
24:29 and uh you would either demo it on stage
24:32 and everyone would do a demo on stage or
24:34 there'd be sort of a science fair style
24:35 thing where you'd set up a bunch of
24:37 tables and judges would walk around to
24:38 those. So the key things you've got to
24:40 think about for that is and if you're
24:42 doing it online it's like 10 times
24:43 easier because you haven't got to find a
24:45 venue and you haven't got to like do
24:46 catering and all that kind of stuff. Um,
24:48 and I did a lot more of the online stuff
24:50 because of I started I did a few in 2019
24:53 and then obviously pandemic came around.
24:55 The online ones, the key thing is having
24:57 a good community place to do the
24:59 hackathon. You've got the snack so that
25:00 makes that very easy, but places like
25:02 Discord are a great place for it. Um, we
25:05 used to think back in the day doing lots
25:06 of like online workshops during the
25:08 hackathon was a good idea, but in the
25:09 world of online, there's so many of
25:11 those sort of resources out there that
25:14 it doesn't really get very good
25:15 engagement. and actually uh focusing on
25:18 just um being helpful in Slack and stuff
25:22 is and like hosting office hours where
25:23 people can come and discuss their ideas
25:25 is more useful. Um and then you get on
25:29 to the Sunday and you've got the uh
25:31 normally doing it over a weekend, you've
25:32 got the judging part and that's actually
25:34 the most difficult part to organize of a
25:35 hackathon, especially the online ones
25:37 because um you can either there's two
25:40 ways you either organize the judging and
25:42 figure out the winners at the same time
25:44 of the event. So you do it all pretty
25:46 much in real time and that can be
25:47 stressful or you say we'll announce the
25:50 winner later in the week but then you
25:52 sort of lose engagement there because
25:53 people might then just you know go back
25:54 to their normal lives, forget um miss
25:57 it, right? So it's it's difficult and uh
26:00 judging wise there's there's a few
26:02 matrixes online you can use for
26:04 different categories you should judge it
26:05 on how you can weight all the different
26:07 judges scores so that you can get a
26:09 fairly fair uh result and then if you
26:12 get any sort of drawing points then you
26:14 can sort of discuss. Now the thing I
26:16 used to really like about hackathons was
26:18 having categories. Normally hackathons
26:20 are pretty open-ended, but uh if you can
26:23 get sponsors involved with the
26:24 hackathons, having a hackathon project
26:27 that is um best use of the sponsor
26:30 technology was actually one of the ways
26:31 I found uh enjoyment at hackathons
26:34 because I turn up and I go, I don't
26:36 really know what to build. Let me have a
26:37 look what sponsors are here and try
26:39 doing something with their tool. I get
26:40 to learn something new. Maybe it'll be
26:42 useful this weekend, but there's a
26:44 chance I could win some cool prize at
26:46 the end of it, too. And uh I ended up
26:48 doing all sorts of really cool projects
26:49 that won prizes because I knew that I'm
26:52 going to build with this tool. Now I've
26:53 got to think of an idea that best uses
26:55 this tool and will catch attention. And
26:57 uh I quite enjoyed that. Whereas uh the
27:00 open-ended prize can often be quite
27:02 overwhelming because you go what do I
27:04 what would I possibly use? Like what
27:06 could I do? Right? There's so many
27:08 things. And the thing that people often
27:09 get wrong at hackathons is they think
27:11 I'm going to build the next Facebook and
27:12 then they forget that Facebook was not
27:13 built in 24 hours and they get to, you
27:16 know, two hours before submissions close
27:18 and they go, oh, I have a project here
27:21 that like has a login page and that's
27:22 it. And the login page doesn't actually
27:24 work and they go, well, that was a waste
27:26 of time.
27:29 And but one thing you mentioned uh that
27:32 was uh I think it was about uh when you
27:35 were a participant. So you saw what
27:37 sponsors are there, what kind of tools
27:39 uh they have and then from that you
27:42 thought what can I actually do with
27:44 these
27:45 tools. To me it sounded like um the
27:48 problems were open-ended or like the
27:50 hackathon was about just hey do
27:52 something cool here like the things you
27:55 might use you have like the weekend go.
27:59 Um, was it like that or was there some
28:01 theme like you would uh get some
28:04 directions like okay we're working on I
28:07 don't know some specific area where you
28:09 want to do things because for me also a
28:12 problem like how to actually
28:15 okay like there are some people who want
28:17 to do something but like
28:20 if I just give
28:22 them um no constraints at all they will
28:25 not do anything. Yeah. because they will
28:28 just run think okay what should I do and
28:30 then the time is over
28:33 so like how how to deal with this
28:35 problem yeah the open-endedness works
28:37 quite well for inerson events because
28:39 when someone's committed to turn up
28:40 right they'll normally stick around and
28:42 if there's free food right there's the
28:44 incentive to hang around but the online
28:45 hackathons right it's hard to keep that
28:48 engagement up because they can just
28:49 switch off at any point and if it's not
28:51 going well or they feel like they
28:53 haven't made much progress they'll just
28:54 give up because there's nothing there's
28:56 no consequence to giving up or there's
28:58 no downside. It's not like they have to
28:59 then travel home or whatever. Um, so the
29:02 cate so some of the events I've seen
29:05 would would have categories like best
29:08 use of data or AI or something quite
29:11 broad but still like it gives you a
29:13 focus but it's still broad enough that
29:15 you can use your creativity. Um, but
29:18 then others would be maybe uh just
29:20 completely open-ended and then you could
29:22 use the sponsors tools. One of the
29:24 prizes I won was for hackiest hack. We
29:26 we didn't intentionally go for that
29:27 prize, but the project we built was so
29:30 barely held together that uh people were
29:32 like, "Yeah, this is the most hacked up
29:34 thing I've ever seen. It's a miracle
29:35 that it works." And like if you you look
29:38 at it wrong, it will just stop working.
29:40 uh it was called called will emojis
29:42 which was basically we thought it'd be
29:44 really cool to use this Microsoft uh
29:46 vision API to take if you sent it a
29:49 photo it could tell you the emotions of
29:51 the photo and then as a result we could
29:53 then use a thing to cut out my face from
29:57 that photo and then turn it into an
30:00 actual true type font that you can
30:02 install on your phone or your laptop and
30:04 then when you type the laughing emoji it
30:06 would actually be my face not just an
30:08 image that we pasted in an actual emoji
30:11 in the same way that you have different
30:13 emojis between like an iPhone and an
30:15 Android. You could have a will emoji if
30:17 you wanted. And so we took a load of
30:20 photos, figured out the emotions,
30:22 uploads, you know, cut the face out and
30:24 then installed it as a font. But the
30:26 thing is all of those different stages
30:29 barely worked together. And like when we
30:32 actually ran the demo um where we had
30:34 the emojis you could type in like it was
30:37 pretty buggy. It didn't really work, but
30:39 people were like, the fact that this
30:41 sort of works is just wild. The fact
30:45 that you thought of this as an idea uh
30:48 is kind of crazy. Yeah, this is the most
30:50 wild thing. Like, how did you even how
30:53 did it even occur to you to to do this
30:56 particular thing? Cuz like I don't know.
31:00 It's random. It is very random. I I
31:04 remember that Microsoft was sponsoring
31:05 the hackathon and they said like best
31:07 use of Microsoft would Microsoft Azure
31:10 will win like a a Surface Go and we were
31:13 like wow that's really cool. So let's
31:15 have a look at Microsoft uh let's see
31:17 what Azure has on offer and we were like
31:20 uh at this point we'd done quite a few
31:22 hackathons so we were like we know we
31:24 kind of had a formula for what won a
31:26 hackathon which was basically a project
31:27 that had a very clear scope. It was
31:30 very, you know, it did a thing, it
31:32 processed the thing, and you got a
31:33 result. It was, that was it. It didn't
31:35 do anything more. It wasn't that
31:36 complex. It just did the thing very,
31:38 very well. And we were like, it'd be
31:40 pretty cool if um we could do something
31:42 with image recognition. And then a
31:44 friend of mine was like, oh, I've been
31:45 reading about true type fonts recently
31:46 and like how you can create them. Uh, I
31:49 wonder if we could like use um this like
31:52 there's this like library on Linux that
31:53 lets you like create fonts. I wonder if
31:55 we can like integrate with that to
31:58 effectively generate fonts in real time.
32:00 And so basically all of us had these
32:03 weird ideas and we were like I guess we
32:05 could stick them all together and create
32:06 something that works. I mean it's one of
32:09 those ones that it was one of those
32:10 ideas that was gradually evolving as the
32:13 hackathon went on. And every time we and
32:14 we did this at Oxford University, so
32:16 there was a lot of like prestige there,
32:18 people trying to build really useful and
32:20 impactful projects. And we're there
32:22 being silly with this project. And every
32:23 time we talked to them, they were just
32:25 like, "That's just so silly. That's
32:27 never going to work." And then we demoed
32:28 it and everyone was like, "Okay, we take
32:30 it back. We take it back. We just
32:32 thought you were messing around. We
32:33 didn't realize you'd actually build it."
32:37 Yeah, but it's it was still messing
32:39 around, right, at the end. Oh, yeah. Of
32:41 course.
32:42 But the the point is to have fun, right?
32:44 Like not so necessarily have social
32:46 impact at the end. Exactly. The issue is
32:48 at a hackathon it's such a short space
32:50 of time that to actually have impact is
32:52 very hard and so the best thing to do
32:55 especially as a student right is to
32:57 focus on learning new things and in our
32:59 case it was well we this person wants to
33:01 learn about true type fonts this person
33:03 wants to learn about Microsoft Azure. So
33:05 we all came out of it, you know, feeling
33:07 good because we had a chance to play
33:09 around with some new tools um which we
33:11 wouldn't have necess necessarily
33:12 previously done.
33:15 So worked quite well. Was there another
33:18 Will in the team or will MoJ's uh Will
33:21 is you? It was it was me. Yeah. I
33:24 There's people who like saw me taking
33:25 lots getting lots of photos taken of
33:27 myself against a white wall so that we
33:29 could then they were like why is he just
33:31 pulling all these different expressions?
33:33 We were like looking at the emojis list
33:34 trying to figure out what facial
33:36 expressions I needed to pull.
33:39 Cool. Okay, let's talk about MLH. So MLH
33:42 is Major League Hacking or what is that?
33:46 Yeah, Major League Hacking. So what? So
33:49 MLH uh started about 12 years ago as uh
33:54 an organization to help students run
33:56 hackathons. Like you were asking
33:58 earlier, right? Hackathons can be quite
33:59 complex. There's lots of moving parts.
34:01 and how do students, especially if your
34:03 university doesn't have a hackathon,
34:05 learn how to build them. So, the idea
34:06 was MLH would provide like pre-event
34:08 support and they would also send a
34:10 representative to the event. And uh I
34:13 became friends with a lot of these
34:14 representatives cuz there weren't that
34:15 many in the UK. So, I often ended up
34:17 bumping into the same people at
34:19 different hackathons and they were like,
34:20 "Oh, you would," especially once I
34:22 started organizing hackathons, they were
34:24 like, "You would be great at this. like
34:26 you should totally apply to become one
34:27 of the representatives and uh come along
34:30 to these hackathons. And I thought,
34:32 yeah, that sounds cool. I get the
34:33 opportunity to go and help more people,
34:35 but at this time uh the travel and stuff
34:38 would get paid for and I wouldn't have
34:39 to fork out the very little money I had
34:41 as a student to continue going to these
34:43 events. So, it seemed like a win-win
34:45 situation to me. Now I applied for the
34:48 role um at the sort of start of 2020
34:52 when uh we were full swing of
34:55 volunteering at different hackathons and
34:57 uh I was a judge at a lot of them in the
34:59 UK helping uh as apparently I had a good
35:02 idea of what was a winning project or
35:04 not and um I interviewed with them and
35:07 they were really impressed but then uh I
35:09 was due to have my final interview just
35:12 as the pandemic started and so MLH was
35:15 in sort of shutdown mode of figuring
35:16 out. Well, our whole business model
35:18 evolves around running events in person,
35:20 but you know, that's not happening
35:22 anymore. So, I guess we got to figure
35:24 out how to do online events now. And
35:26 then, uh, after they sort of figured
35:28 that out, I finally got my final
35:30 interview, I got offered a job, but
35:33 sadly there wasn't anything for me to do
35:34 because they wanted to train me before I
35:36 could do any events, but they hadn't
35:38 figured out how to do online training.
35:39 So, they were like, "We're just too busy
35:41 right now." So, I was basically just sat
35:43 there like waiting for anything to come
35:45 up.
35:46 Um, and then I noticed that MLH had uh
35:49 just launched this new program called
35:51 the MLH Fellowship. And the idea was
35:53 that the MLH fellowship was uh to sort
35:56 of a lot of students had lost
35:58 internships, me included, and they
36:00 thought, wouldn't it be great if we
36:01 partnered up with these organizations
36:03 who have a lot of open-source projects
36:05 like Meta is a good example where
36:06 they've got tons of them like React,
36:09 they've got all the fair projects and so
36:10 on and so on.
36:12 uh they could come and sponsor some of
36:14 these fellows. Uh we'll basically run
36:16 the program. We'll mentor them. We'll
36:18 give them the structure they need uh and
36:20 support they need to then be able to
36:21 contribute to them so that these
36:22 projects would get um some good open
36:25 source contributions that were actually
36:26 useful. Uh and these students would
36:28 learn how to contribute to a repository
36:30 that was bigger than their like two line
36:32 two Python file project, right? They
36:34 were like wa I've actually learned how
36:35 to work on a big project. Um and then
36:38 they can put that on their CV or resume,
36:40 right? and say I contributed to react
36:42 and I actually built something useful
36:43 not just like a typo I found um so there
36:47 was o they were looking for people to
36:49 come and do interviews uh to just like
36:51 vet these students to make sure that
36:52 they you know just basic things and I
36:55 was like I literally have nothing to do
36:57 my university exams have been cancelled
36:59 sign me up I just want to be involved
37:01 and this sounds really cool and I got
37:03 really involved in it I got I got
37:05 invited to help out with some of the
37:06 technical interviews because I basically
37:08 had lots of free time and they were like
37:09 we haven't actually figured out how to
37:11 really run this program. Uh the classic
37:13 2020 problem of everything's happening
37:15 so quickly, we don't know what's going
37:16 on. So I um I was like, "Yeah, I were
37:20 like, would you like to come and help
37:21 out for the summer? Uh work alongside
37:23 the CEO, just figure this out." And I
37:25 was like, "I literally have nothing
37:26 better to do. This sounds great." And uh
37:29 what turned into what I thought was just
37:32 a summer internship thing. You know,
37:34 pandemic would end. I'd go back to
37:35 university. I'd go do some of these
37:37 hackathons in person. happy days. Uh
37:40 ended up turning into a part-time job
37:42 for another eight months. Uh helping to
37:45 because we only thought we were running
37:46 one of these programs. It was never sort
37:47 of the plan to run this continuously. Uh
37:50 and when the thought was, why don't we
37:52 do this again? I was like, yeah, let's
37:53 do it. I'd love to be involved. Um so,
37:55 we did some more. I got involved and
37:57 then I went full-time uh in the summer
37:59 of 2021 and worked there for three or so
38:02 years. Uh so yeah, MLH traditionally
38:06 hackathon company but branched out into
38:08 I guess it's more like a developer
38:10 education company right about early
38:12 stage students who are wanting to become
38:14 developers right and hackathons are a
38:16 great way for them to learn those things
38:17 but the fellowship sort of provided the
38:19 next step right of like now you've done
38:21 a weekend event now you could get an
38:23 internship with us and we'll teach you
38:25 valuable skills to help you uh you know
38:28 get a job at your dream company.
38:31 So the idea was that there were students
38:33 who were motivated who uh wanted to do
38:37 something with their time who didn't
38:38 necessarily have any guidance or they
38:42 basically had time and wanted to put
38:44 this into learning something into
38:46 building something. Exactly. Exactly.
38:47 And what you did is you had a bunch of
38:49 open source projects perhaps from your
38:51 sponsors and uh so what you did is you
38:56 mentored them how to exactly go about
38:58 finding finding uh what to work on right
39:02 how to open pull requests things like
39:04 that am I right? Yeah, exactly. So, um,
39:07 we work with the maintainers of these
39:09 projects who would give us sort of a a
39:10 list of good first issues and sort of
39:12 the things that they would find valuable
39:14 and then we would help the students
39:17 understand like pull requests, etacy,
39:19 right? Making sure that they were
39:21 writing clean code, making sure that
39:23 generally that they weren't just making
39:25 work for the maintainers. That was the
39:26 main goal, right? Is we didn't want
39:27 these maintainers to be like, great,
39:29 I've received these pull requests that
39:30 are full of rubbish and I'm going to
39:32 have to comb through that. it's going to
39:34 be twice as much work for me to make
39:36 these good than me just doing it myself.
39:39 So, um we'd often teach people like get
39:41 best practices, but also just like
39:43 working in a collaborative setting,
39:45 right? How to work with other people cuz
39:47 a lot of these people and we learned
39:49 this quite quickly were that they had
39:51 never really worked in a git repository
39:52 beyond just themselves. Um they were
39:54 really good developers, some of them
39:56 especially like it was very difficult to
39:58 pick the 100 people we had in that first
40:00 cohort. But a lot of them were, you
40:02 know, really really good at certain
40:04 things like some of them were really
40:05 good at data in Python or like really
40:07 good at React. And so when it came to
40:09 projects that were matched their
40:10 specialties, they could write it really
40:12 well. They just didn't know how to write
40:14 it in the bigger context, right? And
40:16 some of them would find like how do I
40:18 know how to go through an open source
40:19 project? I'm so overwhelmed. Where do I
40:22 even start? I can't read all the code.
40:24 It's like don't try and read every part
40:26 of React. Like you're you're going to be
40:28 there all year. it's a massive
40:30 repository. Instead, you just need to
40:32 focus on the bit that you're actually
40:33 contributing to. And we can start with a
40:35 small issue, right? Gradually get, you
40:37 know, they'd work on multiple issues
40:38 over the 12 weeks. It's like, we'll
40:40 gradually ramp them up. So, by the end,
40:42 you've actually worked on a fairly
40:43 substantial issue, but to begin with,
40:45 you were just working on a small little
40:46 bug fix. Um, and you're just getting
40:48 self you're getting yourself set up. I
40:50 guess that's another thing that people
40:51 struggled with as well was the how do I
40:53 set up a development environment for
40:55 these projects? I've only ever just used
40:58 like, you know, one simple git
41:00 repository and a, you know, Python
41:01 virtual environment. Some of these
41:03 projects have got very complex
41:05 environment setups that require multiple
41:07 stages. Um, it was just like getting
41:09 their heads around some of that too.
41:12 How did you know yourself you as a
41:16 MLH these things because for some
41:20 projects getting the end set up uh the
41:23 environment set up the development
41:24 environment is not a trivial thing like
41:26 I remember trying to prepare the
41:29 environment for TensorFlow and like it's
41:32 impossible like unless you work at
41:34 Google uh like they have all these tools
41:37 the basil
41:39 um like there are the usual tools tools
41:41 like
41:42 CMake everything is written in C++ of
41:45 course and then there are things like
41:46 basil and like at the end I just gave up
41:48 I thought like do your things yourself
41:52 cuz like uh and I was I think I was an
41:57 experienced developer right yeah so
41:59 worked as like senior data scientist so
42:01 I know knew a thing or two um how did
42:05 you know these things like in order to
42:06 help the students you needed to know
42:08 these things yourself did you work
42:10 closely with maintainers. Uh to learn
42:13 these things yourself first or how did
42:17 you do this? Yeah. So the way it was set
42:21 up was the students were in small groups
42:23 called pods about 10 students and uh in
42:26 the first cohort they all had a team
42:28 leader who was effectively a senior
42:31 engineer doing this as like an evening
42:33 part-time thing right as a mentor. Um we
42:36 previously then transitioned that model
42:38 to be like student led. So like previous
42:40 students at the program would run those
42:42 groups and we'd have like a sort of
42:44 group of mentors. But what we found was
42:46 basically we would work with the
42:47 maintainers before the project started
42:49 to get all of this information right of
42:51 understanding like how to get the
42:53 project set up and effectively they
42:55 would show us how to do it. So we could
42:58 then turn that into something that we
42:59 could then do for multiple, you know,
43:02 for the whole group of students or maybe
43:04 we'd have the maintainer come and do
43:05 like a a workshop with all the students
43:07 and they would follow along and then
43:08 we'd have our team to go and help them.
43:10 Some projects, like you say,
43:12 straightforward, not too much hassle.
43:14 Some projects were pretty aimful, but
43:16 the maintainers were normally fairly
43:18 forgiving cuz they knew that their
43:20 project was a massive pain even for
43:21 them. So they were normally fairly like
43:23 uh happy to help out a little more than
43:25 some people. Um but some projects were
43:28 yeah we normally would try and work for
43:30 some pro when we uh as the program
43:32 evolved we would try and target projects
43:34 that uh because the issue is students
43:37 don't always have the best computers
43:38 either and so we found especially in the
43:40 later years working with some of the AI
43:42 projects we'd have to you know they
43:45 wouldn't have enough memory and stuff to
43:46 like any GPU power to run any of the
43:48 models and their computers would just
43:50 completely die so we'd have to like give
43:52 them v VMs on the cloud or a lot of them
43:54 were using like Google Collab to be able
43:56 to do some of it. Um but uh yeah, it was
44:00 the data projects were always the
44:02 hardest to work with, mainly because of
44:04 the the computer power that they just
44:06 didn't have. Um so it was uh
44:09 frustrating, but uh we would often find
44:11 ways of like giving them cloud resources
44:14 or Google Google Collab to sort of get
44:16 around some of that. Um but yeah, as the
44:19 projects basically as time went on and
44:22 we realized that some of these projects
44:23 were really difficult to set up, we
44:25 would try and not work on them. Meta is
44:27 a good example because they've got so
44:28 many projects, we'd just be like that's
44:30 not a good fit for us. Can you switch to
44:31 another one? And it's like not a big
44:33 deal. But some companies like we used to
44:35 work with um one company that wanted us
44:38 to contribute to Apache Airflow and
44:40 because they used it a lot internally
44:42 and uh yeah that was a very much a case
44:45 of it's Apache Airflow or nothing like
44:48 we want Apache Airflow cuz they were
44:50 effectively having the students
44:51 contribute some like specific things
44:53 they wanted that were open issues. it's
44:55 just no one had contributed them and the
44:57 maintainer was like this is super chill
44:59 of me because I'm getting contributions
45:01 without having to actually do anything.
45:03 Um but yeah, so it's sort of a difficult
45:06 to find the balance there. Mhm. Yeah.
45:09 Interesting. Yeah. Like what you were
45:12 talking about not having enough
45:15 computers like having computers that are
45:17 not powerful enough like it gave me a
45:20 sort of PTSD of me. I I remember when I
45:23 was trying to compile
45:24 TensorFlow. So like my computer wouldn't
45:27 be able to just compile a thing like let
45:29 alone running the model like I wouldn't
45:31 just be able to have the package like
45:34 from the source code. H that's that that
45:37 was so complicated like I had to rent a
45:39 machine on uh um AWS with I don't know
45:43 64 gigs or was it 32 but like some just
45:47 to compile amount just to compile the
45:50 thing like that I didn't need to run
45:52 anything uh yeah is this thing still uh
45:56 like this program fellowship is it still
45:59 um is it still running? Yeah, it still
46:02 runs. So, I I haven't been involved in
46:03 it now since uh 2023, but uh it's still
46:07 running. It runs three times a year. Um
46:09 it's a little bit more of a before I
46:11 left, I sort of helped to tighten it up
46:13 into a bit more of a repeatable program.
46:16 It hasn't really uh expanded mostly due
46:18 to the economic shift of companies that
46:21 were maybe having uh had allocated funds
46:23 to be able to support open source
46:26 projects. A lot of those sort of budgets
46:27 got cut, which is a shame because it was
46:29 such a cool initiative. Um but I have
46:32 heard that hopefully some with the boom
46:34 in AI we there might be some more sort
46:37 of programs orientated around AI which
46:39 uh will be uh really exciting to see.
46:41 It's still nice to see like on LinkedIn
46:43 students who've been through part of the
46:45 program posting about how they've uh
46:48 finished the 12 weeks they contributed
46:50 to like Airflow for example and uh we're
46:53 actually I think was it it was um we
46:55 used to work with the pallets project so
46:57 like flask and ginger and so on and some
46:59 of those students ended up becoming
47:00 maintainers of the project and so we'd
47:02 end up working with those students in
47:05 future programs and it was just really
47:06 cool to see the fact that we weren't
47:08 just building open source contributors
47:10 we were turning people into maintainers
47:12 as well because of how much like they
47:14 didn't realize what how powerful open
47:16 source was but once they got involved in
47:18 it they were like I loved it this is
47:19 awesome how do I turn this into a career
47:22 um but that's never something we really
47:23 uh imagined when we started they have to
47:26 be a student to take part because I know
47:29 in Google summer of code I think the
47:31 concept is kind of similar to what you
47:33 do with this MLH fellowship I think they
47:38 changed with Google Summer of code but
47:40 you you uh it used to be you had to be a
47:44 student to take part in Google Summer of
47:47 Code and I tried when I was a student it
47:50 was um a lot of time ago my idea was not
47:53 accepted so I couldn't take part and
47:55 then the next year the next summer I'm
47:56 not a student anymore and like right
47:59 okay like I would have participated but
48:01 I couldn't um like is it the thing for
48:04 MLH uh fellow fellowship they have to be
48:08 a student too yeah So previously we used
48:10 to make it so that you're a student.
48:12 It's worth noting that most of MLH's
48:14 community and like uh audience is
48:16 students based on the hackathons which
48:18 are student only. Um but the fellowship
48:21 we did eventually open it up to be
48:22 anyone. So we've had a few people who
48:24 decided they were working some random
48:26 job and they wanted to have a career
48:28 change. They'd been learning let's say
48:30 Python part-time. They felt fairly
48:32 comfortable with Python and they were
48:33 able to pass like our technical screen
48:35 which is pretty straightforward but we
48:37 can't teach you to code. you need to be
48:39 able to have a rough understanding of
48:40 programming. We're teaching you how to
48:42 contribute to an open source project,
48:44 not teaching you basic fundamentals of
48:46 Python, right? Um but yeah, we've had a
48:48 few people who've like gone and they
48:50 maybe did it part-time, so it was a
48:52 little bit more challenging for them,
48:53 but um they were often the most
48:55 motivated, right? Those career changes,
48:57 the people who were like, I really want
48:59 to start a career in tech and this is a
49:02 once in a-lifetime opportunity and I
49:03 don't want to mess it up. And so it was
49:06 it was good to see like to see that. We
49:08 didn't see those sort of people very
49:09 often, but when we did, they were often
49:11 like some of the best students we ever
49:12 saw.
49:14 And they realized that um we're actually
49:17 coming to an end. And which is sad cuz
49:19 like I really wanted to talk about we
49:21 talk a a lot about different things. We
49:24 also touched
49:26 the this topic of developer advocacy. Uh
49:29 but let's maybe spend last 10 minutes uh
49:32 talking about that like what do you do
49:34 as a dev advocate? what uh what are your
49:37 main responsibilities?
49:39 Yeah, so we actually recently hired a
49:41 technical writer. So that has made my
49:43 life a little bit easier. But basically
49:46 uh my role was involved in uh sort of
49:49 evolved in everything to do with
49:51 teaching our users about Kestra. The
49:53 issue with workflow orchestration
49:55 especially with a tool like Kestra is
49:57 that there's so many different ways you
49:59 can use it and for so many different use
50:01 cases. And uh because it's a very
50:04 complex tool, if you don't understand
50:06 it, people aren't going to use it. So
50:08 what my role started in was just simply
50:11 improving our documentation and creating
50:13 videos to teach people how to actually
50:16 use the tool and what it's for. Um
50:18 that's worked really well so far. Now
50:20 we've got a technical writer called AJ.
50:22 Big shout out to AJ. Um that's made my
50:25 life a bit easier. Also AJ's way better
50:26 at writing documentation than me, so
50:28 that that's also a big win for Kestra.
50:30 Um but now it means I can focus a bit
50:32 more on the videos and the sort of
50:34 education side right of uh teaching
50:36 people. And so my focus this year is now
50:38 I've taught people the fundamentals of
50:40 Kestra. Uh I'm now going to teach people
50:43 uh how they can take stereotypical use
50:46 cases of workflow orchestration right
50:48 and how they can do that in Kestra as
50:50 well as just also talking about tools
50:52 that work with Kestra like Postgress for
50:54 example and teaching people about cool
50:56 things to do with Postgress. uh and
50:58 showcasing how Kesha might be a cool way
51:00 of doing what you're doing with
51:02 Postgress. So it's uh it's uh yeah it's
51:05 sort of turned into a very much a
51:08 outreachy education sort of role for me
51:13 which is pretty cool I think cuz I kind
51:15 of do similar thing it's just doesn't
51:18 focus on one specific tool but I think
51:21 what you do is really cool um I'm just
51:24 wondering so for some people who need to
51:26 create content especially videos uh for
51:29 them it's simpler to first create a text
51:32 a script and then create a video from
51:34 that script or for some people like for
51:37 example me I I just go with the video
51:41 directly cuz for me writing is more
51:43 difficult which of these categories um
51:46 like which of them are you I definitely
51:49 lean more into the same category as you
51:51 I make very rough bullet points on what
51:53 I'm trying to achieve I'll get a working
51:55 demo and then I just press record and
51:59 just roughly follow my bullet points I
52:01 have been known to write blog posts and
52:03 or other people have written blog posts
52:05 and I then turn those into videos. Uh
52:07 while those can come out very well, they
52:09 are often hard work because I it's a bit
52:13 too rigid for my my style. I find I'm
52:17 like, "Oh, I'm it feels very unnatural
52:19 for me to try and follow a script."
52:22 And now with the tech writer in your
52:25 team, what you can do is do your thing,
52:28 do a bunch of bullet points, make a
52:30 video, and then the tech writer will
52:32 help you actually turn this into
52:35 a written content into a piece of
52:38 written content, right? Yeah, exactly.
52:40 So, we just had a release last week and
52:42 so, uh, we were sort of tag teaming
52:44 trying to figure out how some of the new
52:46 features worked so that, uh, he could
52:48 write the page in the documentation and
52:50 I could make a video to showcase how it
52:52 worked. Um, sometimes, like you say, he
52:56 would make the video or he'd make the
52:57 documentation page and I could then use
52:59 that as a basis or we'd sort of I'd help
53:02 create like a list of bullet points
53:03 about the documentation page. He could
53:05 then actually flesh that out into
53:07 something useful. Um, but we're, you
53:09 know, we had the same sort of, you know,
53:11 shared bullet points of what are we
53:13 trying to achieve here? And then we sort
53:15 of, it's it's almost good that the video
53:17 doesn't completely follow the
53:18 documentation page, right? Because
53:19 otherwise it's a bit boring, a bit dry.
53:22 It's it's good that the video sort of uh
53:25 gives you something else, right, that
53:26 the documentation doesn't. They both
53:28 have a purpose, right? Yeah. Yeah, makes
53:30 sense. Uh, do you have a good recipe for
53:34 making a good video?
53:37 Yeah. So the key thing is right like uh
53:40 it's got to be a key goal. What is the
53:42 goal of the video right? Like what are
53:44 you trying to achieve? Is the video to
53:46 showcase a certain feature of Kestra? Is
53:48 the video to teach people about a new
53:50 tool? Like what is the goal of the
53:52 video? Otherwise uh it's very easy to
53:55 make the video really long or go off in
53:57 tangents and then you sort of sit back
53:58 and go what was the what was what is the
54:01 point of this? Like if I don't
54:02 understand what the goal is from the
54:04 beginning, then how is a user going to
54:06 understand prep work, right? So you open
54:08 Google document or some some sort of
54:10 text document where you put these
54:12 things, right? Okay, the key goal for
54:14 this video is I want to teach this like
54:18 I I saw your post about a new release of
54:20 Castra, right? So there were some
54:22 features and now let's say you need to
54:25 make a video about one of these
54:26 features. What was one of these
54:28 features? Can you tell us? One of the
54:30 features was a new uh workflow component
54:33 called uh after execution. So my main
54:36 thing was what why did we add this
54:38 right? What is the goal of after
54:39 execution and so I can tell users why
54:43 they would use this? Because on its own
54:45 it's just a thing that runs once an
54:47 execution's finished. But why is that
54:49 useful? Right? Like I don't I don't
54:51 care. It's useful because you can then
54:52 use it to send notifications with the
54:54 actual status of the workflow. Right? it
54:57 if the workflow failed, it will actually
54:58 say failed. Whereas, if it runs during
55:00 the workflow, it will say it's still
55:02 running. So, that's the goal of it. But
55:04 yeah, it's like a you got to put my put
55:06 myself into the user shoes and go, why
55:08 is this useful to them? And then I can
55:11 involve my examples around the goal,
55:13 right? because I could make examples on
55:15 about half these features, but if they
55:17 don't actually like meet the same goal
55:19 of the video, then it then means people
55:22 won't will still not understand why
55:24 they'll watch the video and still have
55:25 no idea why they watched it, right? So
55:28 then the document that you prepare or
55:30 maybe it's just uh something in your
55:32 head, but the goal is okay, you want to
55:34 show case a new feature after execution
55:37 and then you think of a good example,
55:39 right? like where exactly can I uh how
55:42 can I showcase this feature? Um like is
55:45 it sending a Slack notification, maybe
55:48 Telegram message or something like this,
55:49 right? Yeah. And then you show how to
55:52 exactly implement that. Is it right?
55:55 Yeah. Exactly. And uh one of the things
55:57 I like to make sure I do with the
55:59 videos, especially when it's like a
56:00 guide, is I don't like to cut corners. I
56:04 like to make sure I show exactly from
56:06 step one all the way to the end result.
56:09 I find it very frustrating myself when I
56:10 watch a technical video on YouTube and
56:12 they go, "Oh, just set up Google Cloud
56:14 and this like once you've got Google
56:15 Cloud set up with all these things and
56:17 I'm like I've never used whatever that
56:19 is." Like I don't know how to set it up
56:21 and I tried setting it up and it doesn't
56:23 work and it just it frustrates me,
56:25 right? and I'm like, "Okay, the video's
56:26 only showed me one bit, but I need to
56:28 know from literally opening Google Cloud
56:31 to connecting it to Python or whatever I
56:33 was trying to do." So, that's one of the
56:35 key things is I like to try and avoid
56:36 cutting corners, but at the same time,
56:39 keeping a good pace because in the world
56:41 of YouTube, good pace to the video is
56:43 everything. If the video is too slow and
56:46 a bit boring, people will tune off and
56:48 then your video doesn't get recommended
56:50 and it makes it hard for the video to do
56:52 well. Um, so like we've got an
56:54 installation guide on how to install
56:56 Castro on Google Cloud for example and
56:58 uh it's 15 minutes long which is really
57:00 nice. Uh if I was looking to install
57:03 something and I could see I could get
57:04 the whole thing deployed in 15 minutes.
57:06 You think oh that's not bad. But if
57:07 there's an hourong video to install in
57:09 Google Cloud you go a I'm not even going
57:10 to bother looking at the tool. It's just
57:12 too overwhelming. Like that's it's too
57:14 much. Right.
57:16 Okay. Maybe a last question before we
57:18 wrap up. What are you working on right
57:20 now?
57:22 Yeah. So, I've uh we've started this new
57:24 sort of learn with Kestra series which
57:26 is all around demoing tools because
57:30 Kestra works with so many different
57:31 tools. Instead of uh trying to do videos
57:34 specifically around Kestra, we're doing
57:36 videos around these tools and then
57:38 showcasing how Kestra can be a really
57:40 useful tool for using that tool. So we
57:43 did one on um Docker recently on how
57:46 what is Docker, why you might use Docker
57:48 and then we demonstrated how you can
57:50 then run those containers with Kestra
57:52 and you can use Kestra to automate that
57:54 process. Same with Git. Now those tools
57:56 aren't maybe necessarily the best
57:58 example of why you would use those with
58:00 a workflow orchestrator but I am
58:02 planning to do one on Postgress soon
58:04 which is a great example right people
58:06 want to be able to automate querying and
58:08 you know loading data into a database.
58:10 So, I'm looking forward to I haven't
58:12 come up with the examples of that one
58:13 yet, but I imagine they'll I'm looking
58:15 forward to that one because the examples
58:16 will be a a fantastic example of why an
58:19 orchestrator is a good good tool for the
58:21 job. Um, but it's more focused around
58:24 but the the start of the video won't
58:25 talk about Kestra, right? It will teach
58:27 people why Postgress exists, why it's so
58:29 popular, um, why people use it, right?
58:32 What is why was Postgress such a cool
58:34 trendy tool at the moment? Um, and yeah,
58:37 I'm hoping to expand that to other
58:38 tools, talk about cloud platforms like
58:40 Google Cloud, AWS. Um, and uh, yeah, so
58:43 far those have done quite well on the
58:45 channel, which is good. People seem to
58:46 really like them. And, uh, yeah, I'm
58:49 also just looking for other tools. I've
58:50 got one coming out soon on UV, which is
58:52 a Python package manager.
58:55 Yeah. Yeah. Like new things like that,
58:58 which are uh, mostly because I find it
59:00 interesting, right? I want to go and
59:01 play around with these tools. Answer the
59:03 question for myself. is are these things
59:05 just hype or are they actually useful?
59:08 So, um it's sort of fun for me but also
59:10 fun for the viewers. So, I just uh went
59:13 to YouTube and typed Castra in the
59:16 search box, pressed enter and I see the
59:19 channel Castra. So, if you want to see
59:21 Will there talking about all these cool
59:24 features so you do the same thing and
59:26 then you hit the subscribe button. I
59:29 think they they need more subscribers.
59:31 So, and then uh like the content that
59:33 will creates is awesome. You'll learn a
59:36 lot um by doing that. So, do this. And
59:40 maybe the last thing uh I know we're
59:43 kind of over time, but you left a note
59:46 in the document, so I want to ask it
59:47 like do you have any um recommendations
59:50 like books or other resources that you
59:52 can recommend to the listeners?
59:55 Yeah. So uh when I was at the fellowship
59:59 and I was helping to sort of manage a
1:00:01 group of these student leaders who were
1:00:03 running their groups, I found it very
1:00:05 overwhelming. Uh I didn't feel like I
1:00:07 was giving them the support they needed,
1:00:09 especially as I was still quite early in
1:00:11 my career. Um and I didn't really have
1:00:13 any experience. And someone recommended
1:00:15 this book called Turn the Ship Around
1:00:16 which is all around uh basically this
1:00:19 like Navy uh Navy chip where they had
1:00:22 these leaders and different uh
1:00:25 leadership styles and it talks about um
1:00:28 basically how um yeah it was basically
1:00:31 just really insightful on different
1:00:32 leadership styles and how uh you don't
1:00:35 rather than people following commands
1:00:36 you want people to feel empowered to
1:00:40 lead themselves right and everyone
1:00:41 becomes a leader and uh yeah it's a
1:00:43 really good read And it really helped me
1:00:45 uh empower my team. And after I read
1:00:48 that book, the team really uh you know
1:00:50 the empowerment in the team was really
1:00:51 good. People really enjoyed it. And
1:00:53 people also did better jobs instead of
1:00:55 feeling like they you know they felt
1:00:58 very open and honest with me about
1:00:59 things that were working and things that
1:01:00 weren't because there was you know no
1:01:02 such wrong thing. I wanted people to
1:01:04 just be open with me. And so, uh, yeah,
1:01:06 if you're finding yourself in a position
1:01:08 where maybe you're not necessarily
1:01:09 managing a team of people, but you're
1:01:11 working with, uh, volunteers or, um, you
1:01:14 know, working with community members,
1:01:16 it's a really good read and yeah,
1:01:18 totally recommend it if you're looking
1:01:20 for how you can help to be a good leader
1:01:22 or aspire to be a good leader one day.
1:01:26 That's amazing. Thank you. U, I hope you
1:01:28 forgive me for keeping you four minutes
1:01:30 longer. No worries. So, thanks a lot,
1:01:34 Will. It was amazing talking to you.
1:01:35 Thanks for sharing all these stories.
1:01:37 Thanks for sharing uh thanks for sharing
1:01:39 all these insights and giving me good
1:01:41 recommendations too. Me personally, but
1:01:43 I'm pretty sure that many of our
1:01:45 listeners will find them useful too. And
1:01:47 thanks everyone for joining in today. Um
1:01:50 I hope you had as much fun as me. And uh
1:01:53 yeah, thanks Will. Thanks everyone. And
1:01:55 um well, we'll see each other soon, I
1:01:58 guess. So yeah, have a great day
1:02:00 everyone.