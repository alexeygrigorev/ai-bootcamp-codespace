0:00 hi everyone Welcome to our event this
0:02 event is brought to you by dat do club
0:03 which is a community of people who love
0:05 data we have weekly events and today is
0:08 one of such events if you want to find
0:09 out more about the events we have there
0:11 is a link in the description click on
0:13 this and you'll see all the events we
0:14 have in our Pipeline and there are
0:17 there's at least one Workshop so check
0:20 it out it's interesting it's about data
0:22 engineering and inje so then do not
0:24 forget to subscribe to our YouTube
0:26 channel this way you'll get up notified
0:29 about all the future streams like the
0:31 one we have today and last but not least
0:33 do not forget to check our community
0:36 where you can hang out with other dat
0:38 enthusiasts during today's interview you
0:40 can ask any question you want there is a
0:42 pinned Link in live chat click on that
0:44 link ask your questions and we will be
0:46 covering these questions during the
0:48 interview and with that stop sharing my
0:52 screen open the questions that Johanna
0:57 prepared and if you're ready we can
1:01 start sure let's go yeah so this week
1:05 we'll talk about mlops incorporations
1:07 and mlops in startups and we have a
1:09 special guest nania and this is not the
1:11 first time we have him in this interview
1:15 we had one last year it was about
1:19 machine learning Engineering in finance
1:21 and actually this was according to our
1:24 statistics was one of the most popular
1:26 most recent episodes of the last year
1:29 and then
1:30 in LinkedIn nania mentioned hey how
1:32 about we record another one and I
1:34 thought amazing idea why did I not think
1:37 about this myself right so uh yeah so
1:42 welcome back uh it's great pleasure to
1:45 have you again and
1:48 yeah yeah and um again the questions for
1:51 today's interview are prepared by
1:53 Johanna B thanks Johan for your help and
1:57 U so while we had a small talk which
1:59 will be cut you gave us a small update
2:03 uh but maybe you can also give us a
2:05 bigger update and also include some
2:06 things for those who do not know you for
2:09 those who did not hear the previous
2:11 podcast interview uh can you tell us
2:13 about your career career Journey so far
2:15 and then maybe give us an update of what
2:18 you've been up to in the last year yeah
2:20 yeah sure sure okay so again starting
2:23 from the
2:24 name I was born and raised in Belgrade
2:27 Serbia uh where I finished my
2:30 my bachelor's and master studies in
2:32 electrical engineering in signals and
2:34 systems which was my first exposure to
2:36 the machine learning theory and after
2:39 short work experience over there I came
2:41 to Belgium I came to do a PhD uh in bio
2:45 engineering so it might might sound like
2:48 a weird switch from electrical
2:49 engineering to bioengineering but it it
2:52 this domain of signals and systems
2:54 basically the theory you learn like you
2:56 probably also know how many data
2:58 scientists can switch from one domain to
3:00 another because the underlying theory of
3:02 systems modeling is pretty much
3:04 applicable to any system that we that we
3:06 can encounter so um yeah uh I came here
3:10 to Belgium to do a PhD but I it quickly
3:14 turned out I'm not really an academic
3:16 type and so after a a year and a half of
3:21 I would say limping through that through
3:23 that job uh I decided to take a take an
3:25 offer I got for working um in a
3:28 consultancy I worked I went to work for
3:30 deoe Consulting in Belgium stayed there
3:32 for around three years and that's like
3:34 so already the PHD was I would say the
3:36 first job first paid job in data science
3:40 and then I went to to the Consulting
3:42 industry to do more and more of that um
3:44 and started doing a bit of machine
3:45 learning engineering along the way so at
3:47 that moment this was mainly prototyping
3:50 models so data wrangling making uh
3:53 making some early models and suddenly
3:57 there came a need to deploy things uh
3:59 and ml was not not a thing back then
4:02 this was like
4:03 201617 it was not a term but somebody
4:05 needed to do it and basically that's how
4:07 I started um more and more learning
4:09 let's say proper python development
4:11 practices uh uh project packaging um
4:15 deploying things on AWS and so forth and
4:18 uh yeah I made like a slow shift into
4:22 into machine learning engineering and uh
4:24 yeah I think since
4:27 2019 I I'm um I was say full-blown
4:30 full-time uh machine learning engineer
4:32 and uh I worked in these last five six
4:36 years mainly in the financial industry
4:37 that's why we had this talk last time uh
4:40 I worked for several companies uh
4:43 several big banks for example ing BBA I
4:47 worked for Euro clear which is the
4:49 largest Clearing House in Europe um yeah
4:52 I think I'm missing only one or two I
4:53 worked for KBC uh for for a couple of
4:56 months also so I think I'm I'm just
4:58 missing a couple of banks in
5:00 to have all the Pok√©mons collected and
5:04 um and yeah so uh and in June last year
5:08 uh I decided to finally do something
5:11 which I plan to do for years and that's
5:13 to become a freelancer and um and yeah
5:16 that happened and so I had a had a
5:18 little short Mission with with KBC and
5:22 then I switched to this um this
5:24 brussels-based startup with which I'm
5:27 working now um it's just very short
5:29 mission of of a couple of months just to
5:31 help them industrialize some code uh
5:33 some python code and uh yeah now I
5:36 will'll since from February I will be
5:38 starting to work with with another uh
5:40 company in Gent uh so that's it so the
5:44 as you can see from these last 10 years
5:47 of I've Been Around quite a
5:50 lot around various companies and
5:52 industries so apart from Finance I
5:54 worked uh for some clients in healthcare
5:56 also in the transportation and like
5:58 Logistics industry
6:00 uh chemical industry and so forth and um
6:03 my most of my experience was uh in big
6:06 companies like what you would call
6:08 Fortune 500 so Corporation whether it's
6:12 a consultancy or whether it's like a end
6:14 client it was mainly most of my time I
6:16 spent with these big corporations and
6:18 that was practically the only way I knew
6:20 how to do things um and then I moved
6:23 like last last two months as I said I'm
6:25 working with this Belgium based startup
6:27 called
6:28 Tempo and and uh it's uh it's an amazing
6:32 thing I would say amazing experience of
6:34 um how things can work in a startup you
6:37 know and it's in a way right yeah it's
6:41 it's a it feels like flying I would say
6:44 in in many ways you don't have
6:46 bureaucratic restrictions or why indeed
6:48 that's the main thing so it's really of
6:52 course um I know very well that these
6:55 bureaucratic restrictions often there is
6:58 a reason why they exist of course they
7:00 are a big uh safety net and and rail
7:03 guards but uh too often yeah they're
7:07 just an obstacle I would say to doing
7:09 things um so yeah this was this is like
7:12 a very very interesting experience and
7:14 uh I feel like like last two months I
7:17 want to go around I want to go to all of
7:19 my previous companies you
7:20 know and and and tell the managers and
7:23 everybody hey look how fast this can
7:26 go and like can you can you explain me
7:28 why we cannot do things as fast or at
7:31 least let's say half of half of this
7:34 speed you know in this previous company
7:36 and I think um I think it would be a
7:38 good exercise for
7:40 many many managers in in let's say
7:43 traditional corporate it uh to spend a
7:46 bit of time in a startup and to see how
7:49 things are agile how things are
7:51 happening quickly uh and to ask
7:54 themselves yeah why why did we accept
7:57 things going at like a tenth of that of
7:59 that
8:00 base and which reminds me also of so
8:04 when we met we met in a conference date
8:07 makers fast I think we accidentally
8:10 ended up on the same car that was
8:12 driving to the right and we started
8:14 talking and then U I also attended your
8:17 talk and your talk was about um how to I
8:21 don't remember the title I remember the
8:23 idea that you don't aing mlops on a Sho
8:28 string amazing title but I remember the
8:30 main idea that you don't need fancy
8:33 things to actually do mlops in your
8:35 company yeah and your example was how to
8:39 get started with basic melops principles
8:42 with basic tools and how to get going
8:45 and I thought wow like it's so easy
8:48 and it feels more like you already had
8:52 this kind of startup wipe you know just
8:54 let's start and then uh add complexity
8:58 as we go yeah
8:59 versus Enterprise where you need to
9:02 think many things uh about many things
9:06 in advance yeah plan for that right
9:09 um so and
9:12 uh thinking about that talk like how
9:16 well these ideas translate to the
9:19 startup world like what do you see there
9:22 I think it translates very well uh I
9:25 think that uh startups really really uh
9:29 have to be very
9:30 lean uh because they're usually they're
9:34 also operating on a certain kind of a
9:35 shoe string so when I when I deliv that
9:38 talk I I I think one of the first slides
9:40 was to clarify what Sho string can mean
9:42 so we all think of on a Sho string on
9:44 like a tight budget which is true I
9:46 would say first of all for startups okay
9:48 some startups maybe collect 500 billion
9:51 or whatever
9:53 like not uncommon right to develop open
9:57 AGI or whatever uh but um so some
10:00 startups some companies some projects
10:02 have a tight budget in terms of money
10:04 some have a tight budget in terms of
10:06 time or in terms of uh human resources
10:09 and so uh in big companies it's usually
10:12 they have a lot of money but usually you
10:16 need to choose your battles you know
10:18 it's like like you have a a gun with Six
10:20 Bullets you know and uh and you need to
10:24 you know aim and shoot very carefully if
10:26 you understand what I mean so in that
10:27 sense that that's the Sho string in a
10:29 Corporation and uh in in a in a startup
10:32 it's usually yeah money and it's like
10:34 number of people and it's always like
10:36 big negotiations for them are they
10:38 goingon to hire a new person or are they
10:40 goingon to you know extend this contract
10:42 or are they going to use this new Tool
10:44 uh and so it makes it's very tempting
10:46 the thing is like in a startup um
10:49 because it's so easy to do many things
10:51 like you just talk to one or two people
10:53 and and you make an agreement it's easy
10:55 to have this like explosion of of tools
10:58 and things that you're using
11:00 of of accounts and everything which is
11:02 what in a big Corporation you're
11:04 prevented from from doing so you're
11:06 being told okay this is the way we do it
11:08 this is used for that end of story you
11:10 know just live with it yeah because like
11:13 which brings me like in my previous
11:16 company I needed to unboard the new
11:18 vendor yeah and that was quite an
11:20 adventure like it was so difficult like
11:23 there were so many people involved and
11:26 then the contract was not that large it
11:27 was actually peanuts
11:29 and then like next time I needed to
11:31 onboard somebody to have a new tool I
11:33 would think twice right and that's maybe
11:36 it was not the idea behind is it worth
11:39 it is this worth it yeah exactly and
11:41 then in the startup you just um you know
11:45 like there's a person sitting next to
11:46 you you're just hey like how about like
11:48 I just saw this demo like how about we
11:50 try it and yeah let's try it yeah it did
11:52 it did it's it's exactly how it goes
11:54 like Now with uh with with t where I'm
11:57 working is hey should we try this should
11:58 we try that let's try log fire let's try
12:00 grafana let's try this and you you just
12:03 you just see what what works best and
12:04 then you you keep the one that works
12:06 best uh but I think there is
12:09 also um in in uh startups I think it
12:13 makes most sense uh to go for
12:17 these let's say vendor Solutions like
12:21 like like you know like like cloudbased
12:23 as uh software as a service solutions
12:25 instead of making your own so which I
12:27 think is very in big companies that they
12:30 often want to make something on their
12:32 own which is a question how clever of a
12:35 decision that is because when you make
12:36 something you need to maintain it and so
12:38 forth and when you have four or five up
12:40 to 10 people in your company you don't
12:42 want a dedicated person for doing bi you
12:46 know you would rather have you know a
12:48 software as a service and then you don't
12:50 have to have a separate person or some
12:52 kind of infastructure engineer is going
12:54 to maintain the servers and whatnot if
12:56 you just think about on premise going on
12:58 premise I think think it's uh it's very
13:00 hard for a startup it would unless it
13:03 really makes a lot of sense for them I
13:05 think it's like a no-brainer choice to
13:07 go for the cloud you know but then again
13:11 there needs to be a clever decision if
13:13 you jump into one Cloud then migrating
13:15 to another Cloud can be uh can be very
13:18 slow and annoying and I think that's
13:20 that's something that I saw that um
13:22 Google is I think very good at uh that
13:24 Google has some kind of uh catch them
13:27 while while they're young program they
13:30 give some money right they give yeah
13:32 they give some money and some credits to
13:33 get like this Buy in and a lot of
13:35 companies go there and some of them
13:37 don't even like it a lot but like okay
13:40 we're here now everything's here that
13:42 it's uh less cost to just continue with
13:45 it then to move to something else which
13:47 is well it's a
13:50 strategy it's an approach but it was
13:52 like uh last time I checked uh for small
13:55 businesses they gave quite a significant
13:57 amount of credits
13:59 know what are the numbers I don't know
14:00 but it must be very attract I know like
14:02 I don't know 50k or something cuz like
14:05 could be could be like I don't know if
14:07 it's a small company would be basically
14:10 free Cloud for a year right yeah yeah
14:12 yeah yeah yeah but I think there is some
14:14 kind of a catch if I don't if I remember
14:18 correctly gole the main one is you kind
14:21 of have to stay in Google Cloud
14:24 right but I think there's also like that
14:26 it let's say doesn't apply to everything
14:29 you right you cannot use like duse or
14:31 stuff for for example yeah yeah that but
14:35 it's it's kind of a trick you know so
14:37 like if if it's 50k it should be 50k you
14:40 know if I'm gonna burn it if I'm gonna
14:43 burn it in one month that's that's my
14:44 problem but yeah okay that's uh but
14:48 can't become chaotic like because it's
14:51 so simple to start to get a new tool and
14:53 then just play with this and then at the
14:55 end you just end up with a bunch of
14:57 tools that you know barely connect to
14:59 each other and then like it's all
15:00 falling apart yeah yeah in that in that
15:04 sense I think cloud
15:06 also adds extra complexity you know so
15:10 because I worked mainly on premise so I
15:12 would say from these 10 years that I
15:14 worked in data science I would say that
15:17 eight were seven eight were on premise
15:19 and up to two were in the cloud and I
15:22 was always yearning for more more Cloud
15:25 experience and then when I switched like
15:27 a fully in the cloud uh full platform in
15:29 the cloud is like no wait man I want to
15:31 go back to on premise because I think on
15:34 premise some things are of course
15:37 they're less flexible you don't have the
15:38 advantage of simple scaling scaling is
15:40 the main uh um minus let's say the lack
15:44 lack thereof um but in the end you see
15:47 that every infrastructure is like you
15:49 have you have machines whether bare
15:51 metal or virtual machines you have some
15:53 switches and some discs and you create
15:56 applications and they run and you open a
15:58 fire firewall and things and then you go
16:00 into the cloud and you have all these
16:03 Key Management identi I am you have this
16:05 so it it quickly becomes like a complete
16:08 Madness um it has I think so many more
16:11 moving parts that you need to configure
16:15 and and and uh I think without without
16:17 like infrastructure as code even with
16:19 infrastructure as code it's a mess but
16:22 it's it's a bearable I think manageable
16:25 mess at least everything is transparent
16:27 what what exists there but like if if
16:29 you start configuring things like and it
16:31 it already happened to me that I had to
16:33 because of the lack of time deploy
16:36 something through the console and then
16:38 I'm like but six months later would I be
16:40 able to repeat this you know will I know
16:43 all the things which I did uh so so yeah
16:46 I think the cloud uh the cloud adds adds
16:49 an extra layer of complexity and indeed
16:51 you can have one tool for the dashboard
16:53 one tool for logging one tool for this
16:55 one tool for that and um and there's no
16:59 I would say analytical formula that you
17:01 can like optimize you know and find the
17:04 minimum and say okay this is the right
17:07 tool stack I think it's really uh what
17:10 do they say what's the right word NP NP
17:13 heart problem or whatever just like okay
17:16 it's an MP hard problem but how do you
17:18 do this so as I understood you um work
17:23 with companies who are pretty young so
17:25 they are startups and they rely this is
17:28 just the latest the L experience most of
17:29 my work was actually with big companies
17:32 and now last two
17:34 months still need to somehow um make a
17:38 choice right so you join them they ask
17:39 you hey well well for me I would say um
17:42 yeah so for this company the priority is
17:45 we need to have these features ready
17:47 within two months we need to have a
17:50 visualization dashboard we need to have
17:52 uh industrialized API for this blah blah
17:54 blah and then it's like let's make it as
17:59 robust and as as fast as possible that
18:01 we can go in the next stage you know
18:04 that we can launch the product uh and
18:07 So based on I would say based on
18:09 experience you know based on experience
18:11 you say of course there are 20 things
18:13 but I cannot justify to them hey let me
18:16 try to things yeah but I can say Okay
18:18 based on my experience this is very good
18:20 let's go with this you know and if if it
18:23 takes me a day or two to make some
18:24 prototype I I show it and say okay does
18:26 this look good let's let's go with that
18:28 and
18:29 uh basically that's the you you I think
18:32 you can never make a mistake if you
18:35 select one of the let's say a database
18:38 postgress you go with po postgress it's
18:41 I would say nobody's gonna tell you why
18:43 did you choose Pro postgress you know
18:44 there are certain tools which if you
18:46 select you're not going to get bashed by
18:48 anyone it's like okay makes sense po
18:50 it's it's proven proven thing
18:54 and yeah and I guess at the beginning uh
18:57 maybe
18:59 CU we recently had a discussion in slack
19:02 and there was question about Cube flow I
19:04 don't know if you tried Cube flow um
19:07 it's it's the I think I today talked to
19:09 somebody about it wait Cube flow is the
19:11 like the kubernetes platform mlops
19:13 platform full blown exactly I never
19:15 tried it I just saw some demos I tried
19:19 it it was a huge pain because like all
19:21 this yaml files and stuff you know like
19:24 kubernetes and sometimes like okay maybe
19:27 it makes sense like in the long run
19:29 but at the beginning maybe you just have
19:31 plus Cup right and or whatever first and
19:34 that's enough because like correct me if
19:37 I'm wrong but that was were like in your
19:39 talk you was you were showing like how
19:42 you can get started with simple tools
19:44 instead of uh you know going for the big
19:48 things that maybe in two years this is
19:50 what you need but right now you just
19:53 want to move quickly and then just
19:55 select the simplest tool for the task
19:58 right and then make sure it's as fast as
20:00 as reliable as possible it's not super
20:03 complicated and you move fast right and
20:05 then like if you need to spend a week
20:07 trying to configure Cube flow then maybe
20:11 it's not the best tool right yeah yeah
20:14 yeah indeed I agree I think all these um
20:17 the more something is how to say the the
20:21 Richer a solution is with features I
20:23 think the more it will drag you into
20:26 let's say getting locked into it you
20:29 know so doing something in Python with
20:33 Python scripts on a remote server you
20:36 know like for development and whatever
20:39 you can always change a server you can
20:40 always change a provider but if you want
20:42 to completely migrate everything uh yeah
20:46 it's it's it becomes very very
20:48 difficulty or if you you're using
20:49 whatever now what Google cloud has
20:51 vertex AI or a sage maker if you if you
20:54 start doing that you're pretty much tied
20:57 to that and you know if you want to
20:59 let's say you have all the Legacy models
21:01 now you want to move to a new platform
21:02 what are you going to do you're going to
21:03 need to retrain did you train those
21:05 models in a reproducible way that's a
21:08 big question
21:09 so yeah yeah I see Choose Wisely so at
21:14 the beginning uh so if what we should
21:17 take away from what you just said is
21:19 like at the beginning try
21:20 to make your choice as more portable
21:24 let's say like if you go for tools like
21:26 be more generic than specific to a
21:30 particular
21:31 vendor yeah well I I think that that
21:35 that makes you more portable indeed so
21:38 somebody maybe wants to start as fast as
21:40 possible by using some kind of a low
21:42 code solution maybe if you if you can
21:43 only hire a data scientist and not like
21:46 a proper for for this what I'm talking
21:47 about you need a proper I would say
21:49 software engineer and systems engineer
21:51 if you don't have such people you cannot
21:53 afford them then you are going to go go
21:56 with some low code platform where the
21:58 data science this is just dealing with
22:00 uh developing a model in some kind of a
22:03 notebook environment and then launching
22:05 it through a click deploy and something
22:08 like that um but yeah then then you have
22:10 lock and I guess uh this can also work
22:14 but IE I prefer to to have this freedom
22:17 to keep this Freedom um yeah y so let's
22:22 imagine I am a machine learning engineer
22:25 and I have two offers so one offer is
22:28 from a start start up and one is from a
22:31 Fortune 500
22:33 company how do I select how much
22:37 money let's say it's
22:40 uh well of course the startup pays less
22:42 right but then you some options you
22:45 don't have this uh and let's say you
22:48 don't have three kits I mean I know you
22:50 do but like this imaginary ml engineer
22:52 does not so they don't need to care that
22:55 much about money yeah
22:58 [Music]
23:00 um it it depends so I would I would
23:03 rather I would rather go for um startup
23:06 especially it depends also on the stage
23:08 of your career are you talking about the
23:10 person in the early stages of their
23:11 career maybe we can talk about like um
23:15 what kind of things we need to think
23:17 about like so I would say a corporation
23:19 is usually
23:20 so where you have I would say job
23:23 safety and you have a narrow scope of
23:26 work so if you are fine with
23:29 uh being a specialist in one thing and
23:31 just sticking to that
23:34 specialty and having a 9 to-5 job where
23:38 you close your laptop at 5 and you go
23:40 home then the corporation is the right
23:42 place for you and that's I would say a
23:43 legitimate Choice which I have also made
23:45 for a number of
23:47 years um on the other side if you want
23:50 to I would say move faster if you want
23:53 to learn faster try more things uh not
23:56 spend I would say unnecessary time in in
23:59 U pointless meetings and so forth then
24:02 then a startup is is a better place but
24:04 also with a startup you can make a
24:05 mistake you know it's um I think with
24:08 small
24:09 companies if it's like a bad atmosphere
24:12 or something you cannot Escape it you
24:13 know it's like I think in a in a bigger
24:16 company there there are more teams if
24:18 there's like a bad team at one place you
24:20 can switch to another team or or
24:21 something you know that there's a bit
24:23 more uh this internal internal mobility
24:25 in big companies is a good thing so you
24:27 can also have like a long career in one
24:29 big company and switch around different
24:32 departments so people can be like data
24:34 engineering then go to machine learning
24:36 then go to envelops devops whatever uh
24:39 and in a in a small startup I would say
24:41 if it's um yeah if it's not nice I mean
24:44 where I'm the guys I'm working on
24:46 working with now is I think it's it's
24:48 all great I could not be happier um but
24:51 yeah there are other stories I have
24:52 heard also uh and usually it's like
24:55 startup is like you're working for
24:57 something on a long
24:59 something in the future you know you're
25:00 expecting for this whole work to pay off
25:03 in terms of like when the company's sold
25:05 or something like that uh but in general
25:07 I think it's like also like like I would
25:09 advise I think for people that want to
25:11 learn a lot in the early stages of their
25:13 career it's also why I prefer consultant
25:16 consultancies compared to big uh let's
25:18 say companies where you work internally
25:20 because within consultancies you can
25:21 change a lot of um a lot of clients and
25:24 you can see a lot of things like in a
25:26 startup you can try a try different
25:27 tools try different approaches but um in
25:30 these also cons this Consulting business
25:33 you can you can triangulate in a way you
25:35 can average and see a bit what are the
25:37 patterns that they're repeating and see
25:39 what are just bizarre things that one
25:41 company did so it's it's interesting for
25:42 me that when you go to these big
25:44 companies uh you will often hear this
25:46 this is how we do it you know and this
25:47 is like just like some bizarre weird way
25:50 they have set up some kind of a cicd
25:52 pipeline or
25:54 um or or or like a python standard
25:57 python project where you see that it was
25:59 set up by somebody who never touched
26:00 python before but he was doing the task
26:02 of maybe like a c or Java developer
26:05 which was told hey you should Now set up
26:07 uh python project structure and uh yeah
26:10 it looks completely weird uh but people
26:12 get used to it you know people get used
26:14 to that and they're like they don't see
26:16 uh they're you know like the what's
26:18 what's it is it the Plato Aristotle's
26:21 cave you know the old the old um story
26:24 of like people living in a cave you know
26:26 and that never see the light there's the
26:28 old story from Greek philosophy uh so uh
26:32 it's kind of like that you know that
26:33 people get so used to this thing that
26:35 they don't realize it's wrong and I know
26:37 when I came to some companies and told
26:39 them guys this is this is a wrong way to
26:41 do it and and one woman told me thank
26:44 you because I felt it was wrong but I
26:46 did not have arguments to she said I
26:49 just even if it's WR you don't always
26:51 have the flexibility to change
26:54 this also never seen a better way it's
26:58 hard for you to say something can feel
26:59 wrong but you cannot say but this is the
27:02 alternative we should go to you know and
27:04 that is good when somebody with external
27:05 experience can come in and say okay this
27:08 is a better way and I can show you the
27:09 better way so let's say if I just
27:11 graduated and I join a corporation and I
27:13 work for 10 years there that's all I
27:15 know right I don't know other ways of
27:18 doing things and maybe it's like not the
27:20 most optimal yeah way of solving things
27:23 but this is all I know and this is what
27:24 I learned yeah but in the startup you
27:27 kind of explore other like many things
27:30 and also maybe one of the things you
27:32 didn't mention but it was what was
27:34 happening when I was having my startup
27:36 experience yeah you pivot a lot like
27:39 especially if it's a small young yeah uh
27:43 and like okay there's one client they
27:44 want this okay this client now decided
27:47 not to continue with us but there's
27:48 another client but they want to have a
27:49 completely different thing now let's
27:51 stop what we work on and try to please
27:54 this client and which means like I don't
27:56 know 180
27:58 degree shift from what you've been doing
28:01 yeah and so it it's kind of it's never
28:03 boring
28:05 right I think I think startup uh for me
28:08 it feels like a like a pack of hunters
28:12 you know that are going somewhere in the
28:13 wild and trying to catch a big big
28:16 animal you know so there's this
28:17 uncertainty there's this kind of also uh
28:20 tight spirit I would say um and I I
28:23 think you really feel more of this
28:25 ownership but also like what I did in
28:27 the last two month months for Tempo it's
28:30 um I would need at least two or three
28:33 other teams to do the same things in a
28:36 big Corporation so I did apart from my
28:39 my core task was uh to industrialize
28:42 this python code to go from like a let's
28:45 say more data science big script piece
28:48 of code to like a proper python project
28:51 and uh okay that I could do anywhere
28:54 alone but to then provision
28:57 infrastructure on my own own to create a
28:59 pipeline to create a repository on my
29:01 own in many companies you cannot create
29:03 a repository you cannot you don't have
29:05 any control over the cicd pipeline there
29:07 is a team that exists there and you to
29:09 submit a ticket so it feels like a city
29:11 hall you know for many for many things
29:13 it's like you know you sit in a room and
29:15 you get heavier ticket and you're
29:17 waiting in line and and you know how to
29:19 do all these things you know and it's
29:21 like ju guys just let me do it you know
29:23 I know how to do this if you want to
29:25 have somebody monitoring watching my
29:27 back if I mess something up fine but
29:29 just you know let me do these things
29:30 it's not so complicated in the end it's
29:32 like a couple of yaml files and yeah a
29:35 couple of configurations here and there
29:37 um
29:39 so also in in big companies you have
29:41 this like it's called
29:44 agile it's it's everything by but agile
29:47 how do they say they say uh in big
29:49 compor corporations agile is like
29:51 waterfall and Sprints you know it's like
29:53 you just you just you just break it down
29:56 and you you just slice water ball a bit
29:58 more um and yeah you have this like oh
30:01 quarterly planning and if you're late
30:03 for the quarterly planning they say oh
30:05 coming three months you know we're all
30:07 booked you know and so H I have P
30:13 PTSD you have flashbacks flashbacks
30:17 now oh sorry it's not for this quarter
30:21 yeah yeah yeah no but but how should I
30:23 say I I'm not gonna I said in advance
30:26 I'm gonna bash corporations a bit but I
30:28 I had a lot of good time there I had a
30:29 lot of very good team teams very good
30:32 friends which I which I really love um
30:35 and uh yeah these corporations as I said
30:38 like you know they give you some
30:39 stability they give you some uh I would
30:42 say you know you know what to expect
30:45 there and uh and you learn some things
30:47 also you learn like for example this
30:49 whole networking thing for in a big
30:52 company it's even more important than
30:55 your I would say Hands-On knowledge is
30:58 to build a network within the company
31:00 and to have what I would call my guy in
31:03 devop my guy in networking and so that
31:06 you you have people with which you have
31:08 good connections so it should not be
31:10 like that because everything should work
31:12 through requests and this and that but
31:13 you in the end you know that there out
31:15 of 10 people there's this guy that you
31:17 know and he's going to do it faster for
31:19 you you know so yeah again like a city
31:23 hall if you know the right people I
31:26 summarize what you said so a corporation
31:28 you get DP safety Financial stability
31:31 narrow scope of work you become a
31:34 specialist in one thing plus there is
31:36 some guidance there is some framework
31:38 and if you're just getting started
31:39 having this framework that kind of
31:42 teaches you how to do things could be
31:44 helpful you have internal
31:46 Mobility um it's lck flexibility in Tech
31:50 because all the things
31:52 already have decided yeah and it can
31:55 feel like a city hall because a town
31:58 hall like because there are so many
31:59 different teams and then you need to
32:00 create a ticket for each to have
32:02 something done and then like all this
32:05 creates um bureaucratic overhead cuz you
32:08 have this what you said what you call
32:10 waterfall and Sprints so you have
32:12 quarterly planning and then like if
32:14 something is not planned for this
32:15 quarter you have to wait till the next
32:17 one sometimes things yeah yeah in
32:20 startups um you move and lar faster uh
32:23 you have few meetings fewer B like less
32:26 bureaucracy yeah um then mostly you work
32:30 with Green Tech Green Field projects you
32:32 don't have a lot of uh legac Legacy
32:36 existing structures existing Frameworks
32:39 uh and while these Frameworks can be
32:40 helpful they also can ALS how to
32:44 say let you move slower right and when
32:47 you don't have these restrictions don't
32:48 have these Frameworks you can move
32:50 faster yeah but I think also wait but um
32:54 a good framework should make you move
32:56 make you move faster that's the thing so
32:58 in a corporation you can also I mean one
33:00 of my jobs was to make Frameworks to
33:02 speed up things you know because if you
33:04 know okay now the next two three years
33:06 we're going to have similar projects
33:08 where we need to build some models for
33:09 email classfication and then deploy them
33:11 quickly and now we're going to make some
33:13 kind of a template so that this thing is
33:15 deployed as fast as possible so that's
33:17 how it should be but I think there is
33:18 like something which goes wrong when um
33:22 I I think a good approach in corporate
33:25 in big it would be this like or platform
33:28 building and not slicing I think when
33:30 when people do it wrong is when they
33:33 slice and dice this these domains of
33:36 responsibility too much you know and uh
33:39 I think ideally it should be that your
33:41 developers people making applications
33:43 should not
33:45 know that a devops team exists or that a
33:47 platform team exists if you make it like
33:50 that you're winning I think if you can
33:51 say okay there's a guy there he wants to
33:53 make something and they can do the whole
33:55 thing and their whole Automation and
33:56 deployment that maybe just they in the
33:58 beginning need to submit a couple of
34:00 requests to create some infrastructure
34:01 of course nobody should be allowed to
34:03 just you know boot 100 VMS with 100 gpus
34:08 uh but it can be done in a better way
34:11 that's my point so I don't think any of
34:12 these things which I just talked as as
34:14 like downsides as minus points is like
34:17 uh how should you say the destiny the
34:19 ultimate I would say
34:21 um yeah fate of all these companies I
34:24 just think that it can be done better
34:27 you know in in these big companies
34:28 because especially because they have a
34:30 lot of resources they have a lot of
34:32 people so the good thing there is that
34:34 also you usually you're part of a big
34:36 team and you usually can fall back on
34:39 somebody you know in a in a startup it's
34:41 very difficult if you want to go you
34:43 know I want to go for holidays you know
34:44 oh wait but who's gonna pick up your
34:46 work in a bigger company there's always
34:48 somebody else there and there's Al
34:50 always somebody to ask if somebody's not
34:52 something is not working you know if how
34:55 this thing was done why is this pipeline
34:56 breaking what's happening what do I do
34:59 here so that's a that's a really good
35:01 thing that uh that you can that you're
35:03 not alone and in a startup I think it's
35:05 because it's so lean um I I think
35:09 it's it's like a general rule they say
35:12 like you should not be for example a a
35:14 first data scientist in any organization
35:16 especially if you're a junior if you're
35:17 a very senior that's fine but if you're
35:19 being asked to join a team as a junior
35:21 and the only person like look somewhere
35:24 else you know probably goes the same
35:26 goes for data engering and everything so
35:29 what you said it's like it's more chaos
35:32 in startup and you need to be fine with
35:35 this chaos and you need to yeah yeah
35:38 it's a bit of like war war path like you
35:41 need to be a bit more robust than I
35:43 would say never boring but also what you
35:46 didn't mentioned and what was experienc
35:48 the experience for me is it's never
35:52 boring yes and you have this uh cool end
35:55 to end ownership of things and you feel
35:57 this okay I produce some codee and I see
35:59 this in action like it doesn't need to
36:01 go through like all this 10 steps of
36:02 approval whatever um but on the other
36:06 hand because there is this constant uh
36:09 uh firefighting mode like you
36:12 constantly uh pivot you constantly work
36:15 on something like things break you try
36:16 to fix them at least that was my
36:19 experience at the end of a day I felt
36:22 exhausted like I just I I was given like
36:25 not even 100% but more
36:28 M and it was like super difficult for me
36:31 to do anything after work and then like
36:33 after one year I was
36:36 like exactly so like I just burned out
36:40 and corporation that does not happen
36:42 right so yeah you don't have this
36:45 speed uh with which you have to move
36:48 yeah it's like you know you have to run
36:50 uh all the time and in the corporation
36:52 is more like you know a walk in a park
36:56 yeah and it is but that's what I say it
36:59 all has it has pluses and minuses I
37:02 agree so uh this is for me it's like
37:06 just refreshing that I can move at my my
37:10 maximum speed you know but again I'm
37:12 doing this for two months so if I would
37:14 do this at my maximum speed for for a
37:17 year I would probably you know also be
37:20 in know close to close to burnout but
37:22 you know in eastern in Eastern Europe we
37:24 don't have burnout you know yeah right
37:27 what is that
37:29 we don't accept it
37:30 you but like the amount of things I
37:33 learned because I needed to build so
37:35 many from scratch so many things from
37:37 scratch and experience like uh many
37:40 problems like things break how to make
37:42 it them work with real clients I learned
37:46 so many
37:47 things yeah yeah yeah yeah that's true
37:50 but you know what I see as a risk now
37:51 with llms with with AI coding AI
37:54 assisted coding um
37:57 think it's a kind of a trap because I
37:59 realized how quickly also I could do
38:01 many things for which I'm not really an
38:03 expert and it works you know but I'm
38:06 thinking like okay this is two months
38:08 probably it's still not a lot but I'm
38:10 thinking if I'm worked for two years and
38:12 doing things so let's say my my primary
38:15 competence is python python coding but
38:17 then suddenly I do a kind of some kind
38:19 of an anible script and I used AI to
38:21 help me with that and then I use some
38:23 kind of a GitHub Pipeline and I AI helps
38:25 me with that you know and if there's
38:26 like 10 20 30 places which is not like
38:29 let's say then some come some bash
38:31 scripts or I start making some HTML and
38:34 JavaScript you know because I can
38:35 because now the AI will help me with all
38:37 of that and it will not take me ages I'm
38:39 just thinking
38:41 that because I've seen people online
38:43 saying yeah man now I just one person
38:46 does things in three weeks yeah but what
38:48 part of all that code is like technical
38:50 Deb what part of that code which you
38:52 produced quickly will be a monster to
38:56 maintain uh one year later you know
38:59 because 90% 90% yeah yeah and then
39:02 that's what I joked also online like how
39:04 you know you have no SQL which is like
39:06 no you have SQL which is schema on right
39:08 then you have no SQL to schema on read
39:10 and now with AI coding it's like learn
39:12 on right before and now it's learn on
39:15 maintain you know so you need to okay
39:17 when you go back to your code when it
39:19 breaks then you need to learn it you
39:20 know and um yeah we're gonna we're going
39:23 to have some some interesting I would
39:25 say like for a startup it's okay right
39:27 or not depending on how much you let
39:30 this technical depth to accumulate right
39:33 yeah yeah but you imagine like you see
39:35 some code in a company uh and you see
39:37 something weird and you go and you say
39:39 get blame you know and you say who who
39:41 made this and often I do this and I ask
39:43 hey man what is the meaning of this like
39:46 why did you do this like exception
39:47 handling in this way for example and
39:49 then a person can tell me yeah you know
39:51 because of this and that problem okay
39:53 but if this person used an llm he cannot
39:56 give me an answer uhuh
39:58 no person is is
40:01 you that also happens yeah but um so
40:06 that that's GNA be that's going to be uh
40:08 I I think the the the llms are mainly
40:12 drastically
40:14 increasing the number of the amount of
40:16 like of technical death we are pumping
40:18 out I would
40:20 say but yeah you feel very fast I I did
40:24 certain simple applications super super
40:26 quickly but yeah like for a startup
40:30 isn't it okay to move fast and then deal
40:33 with some like of course you need to
40:35 keep this in mind you know that okay now
40:37 you have this technical debt that you
40:39 will have to repay but you accept it and
40:42 you but it need to be someone who is
40:44 aware you know it's like in code
40:46 whenever I do something quickly in a
40:48 quick and dirty way I write a too or a
40:51 note saying this needs to be checked
40:53 there needs to be some kind of a trace
40:55 that you know
40:57 entire Juni yeah yeah if you're just a
41:00 junior there like you're you're not
41:03 aware I mean it's very easy to move fast
41:06 and leave I don't know a certain Port
41:08 open and leave certain security holes
41:12 and then your startup let's say you're
41:14 building a startup and it's very
41:16 important let's your data is is is 90%
41:19 of the value and then your data gets
41:20 leaked and you killed your
41:23 startup so yeah you know so moving fast
41:27 like you should take informed risks you
41:30 should be aware of the risks you're
41:32 taking and you should have some kind of
41:34 a mitigation strategy an idea okay this
41:36 is GNA be like a big red flag and I'm
41:38 gonna say we should always have this
41:40 like pinned somewhere on top of our
41:42 mailboxes or wherever or in front of my
41:45 post it on my screen that I still have
41:47 this vulnerability or issue which which
41:49 I'm currently living with you know and
41:51 uh if you're using I think these uh llms
41:55 too much just being optimistic you know
41:59 cross yourself and like hope it works
42:01 then
42:02 uh then I think it's uh yeah it can lead
42:06 to many many ugly situations so be ready
42:09 to have to repay this debt at some point
42:12 yeah indeed yeah but I think it's a good
42:14 way that it's called debt because indeed
42:17 it's something that you take a loone to
42:19 move to leverage something to like start
42:22 delivering some value as soon as
42:24 possible but you indeed need to be a
42:27 wary because if you are if you're not
42:30 aware of the of the
42:31 repayment then it's just I don't know
42:34 some fatal disease eating you up and
42:37 you're not even aware yeah that's why I
42:40 you mentioned that it's not a good idea
42:42 to join a startup as a junior especially
42:44 if you're the only let's say data
42:46 scientist and you're junior data
42:48 scientist joining that startup cuz you
42:50 might now with LMS you can actually do a
42:53 lot but because of your lack of
42:55 experience you might not real realiz
42:57 that some things are suboptimal or
42:59 you're leaving some things open and
43:01 because you don't have this experience
43:03 and nobody is there to actually tell you
43:06 hey like you shouldn't do this yeah then
43:10 it can create problems right yeah yeah
43:12 definitely okay so then for a junior you
43:15 would say would you say that it's better
43:17 to go to Corporation or more established
43:21 any any company where there is like uh
43:25 one two plus one plus two or to more
43:27 than two seniors that you can learn from
43:31 so if you're a junior I think as a as a
43:32 junior I
43:34 think as a very very Junior person I
43:36 think you will learn anywhere actually
43:38 like in your first two three years of
43:40 experience but then it can happen that
43:42 you feel a bit saturated and then you
43:45 can maybe look for for for other options
43:48 because yeah like in in Consulting it's
43:52 normal that you change all these clients
43:53 if you do that jumping from one company
43:56 to another than can look bad on your CV
43:58 you know so yeah that's what I also like
44:01 about freelancing that it's a lot of
44:04 little missions that you can chain and
44:07 it's still fine I realized that we have
44:10 quite a few questions and okay can try
44:13 to cover them so the one of the
44:15 questions is which tools um do you use
44:19 for your mlops projects and what's your
44:21 advice on investing time on New or Old
44:24 tools it's actually like that is a third
44:26 question but let's start so it's like
44:28 three questions in one so which tools do
44:30 you use now for your mlops
44:32 projects
44:34 so right now my main I would say
44:38 approach
44:39 was it's actually to be as minimal as
44:42 possible as as the talk I delivered so I
44:45 mainly use really python pure Python and
44:48 develop scripts for training in Python
44:51 and uh I try to do as much as I can of
44:54 the orchestration through cicd
44:58 um I'm now supposed to be to working
45:01 start working on a project where uh
45:03 Daxter will be used as an orchestration
45:06 tool and I like Daxter a lot I didn't
45:08 have a lot of opportunities to use it so
45:10 that's why I'm looking forward to that
45:11 but um I mean you need some kind of an
45:14 orchestrator
45:15 definitely and I used
45:18 mlflow um I used ml flow I recently set
45:21 helped the startups set up their uh
45:23 internal mlflow tracking server so I I
45:27 think that yeah you just look at at the
45:29 basic components of melops framework and
45:32 um there's not a lot actually you have
45:34 the model registry you have the the
45:36 feature stores so I I still did not work
45:39 with I still not help anybody set up a
45:41 feature store but um I try to go for the
45:44 tools which are let's say in that moment
45:47 let's say top three tools that are
45:50 established already mature enough and I
45:52 I just go for them one one one new thing
45:54 which I tried recently which I liked a
45:55 lot is for observability
45:57 it's uh it's more for the operations
45:59 part um of of the whole flow it's log
46:03 fire it's built by
46:05 this log fire it's it's pantic log fire
46:08 so Samuel cin which developed pantic and
46:11 his team they developed this log fire
46:13 Library which is like a online platform
46:17 and then you just basically add a couple
46:19 of lines in your code and it
46:20 automatically sends logs uh with very
46:24 detailed like you can see very detailed
46:26 tracebacks of exceptions and everything
46:28 um that thing I liked really a lot
46:30 because I tried to set up grafana or
46:32 something like Prometheus and grafana
46:34 and this and that and I just gave up and
46:37 then I tried log fire and I started
46:39 working with it in with an hour and uh
46:41 that's something I really like for
46:43 observability and it can also help you
46:44 collect like system logs like memory CPU
46:47 logs and your application logs wherever
46:50 you so if you let's say if you use fast
46:52 API it has like this let's call it
46:54 instrumentation plugins for fast AP or
46:57 for tensor flow or for this and that and
47:00 then it collect some extra information
47:02 on these U these but you you have a lot
47:05 of options there if you you just need
47:08 there's tons of blog posts where you can
47:10 see all ports possible configurations
47:14 yeah so I think yeah that sounds it's
47:16 the first time I hear about this so
47:18 previously um like for locks the tool I
47:21 would the stack I would go with would be
47:23 elk elastic search Lo kibana or
47:26 sometimes instead of FL lo stach you
47:27 have something else but it's not point B
47:30 it's very new it's like less than a year
47:32 old and it's like the big big new
47:34 project from from pantic people yeah so
47:37 when it comes to grafana you don't use
47:39 it usually no I started and I gave up it
47:42 looks like too mature so I'm not a bi
47:44 person and for example yeah recently I
47:47 used for some visualization I also used
47:50 streamlit so I really like how streamlet
47:52 works of course yeah it's so simple it's
47:54 so simple but the only thing I have a
47:56 problem with like Al also ml flow stream
47:58 L is like the moment you want to get to
48:01 the point of like authentication and
48:03 like they do have some basic
48:05 authentication but it's hard to get like
48:08 full Enterprise level stuff you know
48:11 like I don't know integrating with
48:12 active directory or whatnot for that you
48:15 need to take some kind of a paid version
48:17 on data Bri data bricks has it or
48:19 whatever yeah so yeah it's not that
48:23 simple I remember trying to talk to data
48:27 bricks people saying hey I just look ml
48:30 flow with authentication I don't need
48:31 anything else just ml flow yeah and yeah
48:34 but you know it only comes with the data
48:36 Bak platform so you kind of have to take
48:38 the whole
48:39 thing yeah yeah that's that's also I
48:41 think a bad decision if any vendors are
48:44 listening I think every product should
48:47 be as modular as possible and that you
48:50 can just take that part you know if you
48:52 have like a really good uh model
48:55 registry you should let people use just
48:57 your model registry or just very good
49:00 observability just let people use that
49:01 one and don't force them to buy
49:03 everything yeah maybe but maybe datab
49:05 bricks doesn't really care about flow
49:07 that much they care more about like
49:08 selling uh because this is where they
49:10 make money and uh people eventually just
49:13 go with weights and biases or something
49:15 like that or registry whatever um so
49:20 like this question has actually three
49:21 questions so the second one is what's
49:23 your advice on investing time or New or
49:26 Old to tools I guess the question is
49:28 like how do you um well all tools what
49:31 are old tools uh let's say graan is on
49:34 all tool and lock fire is a new tool
49:38 yeah well I would say the old tools are
49:40 so the ones which are survived which
49:43 have survived the you know everything
49:46 the every apocalypse you should
49:48 definitely always learn about I would
49:49 say Linux you should know Linux uh
49:52 python uh these things are like the the
49:55 foundational bash script
49:57 if if you know these things a bit of a
49:59 bit of networking um a bit of anible or
50:02 some some of these things are are very
50:05 very useful like a bit of also like
50:07 front end development like just to know
50:10 what how HTML and CSS and JavaScript
50:13 work together and to make a very simple
50:15 application all these things I think
50:17 give you like a lot of a lot of depth I
50:19 would not say I mean something old and
50:22 deprecated I don't think like maybe you
50:24 shouldn't go with Java six right it's I
50:27 I also don't think that yeah that's a
50:30 there are people who are still uh there
50:32 are young people learning um Mainframe
50:35 development you know and still you have
50:36 a lot of Mainframe codes so it's like a
50:39 gamble so are you like a what's your
50:41 risk appetite are you do you want to to
50:43 you know Target a certain Niche yeah you
50:46 can learn probably you can learn hll and
50:48 Pearl and find a job with it and there
50:49 will not be a big pool of candidates for
50:52 that you know but then you have to be
50:54 ready to be hungry for a couple of
50:56 months potentially while waiting for the
50:58 right job but if you want you're still
51:00 coding husk even though you're hungry
51:03 right it's worth
51:05 it yeah but uh if you want to play it
51:08 safe I think it's very simple you open
51:10 up job postings and you do you make a
51:12 little scraping script which downloads a
51:15 lot of job postings and you average you
51:17 see what are the keywords which get
51:19 repeated and you learn that that's
51:20 basically what I did you know that's how
51:22 I got into python yeah and if you do
51:24 that and let's say
51:27 you see that all companies use airflow
51:29 right so that's all they want um but
51:32 like airflow is not I don't know I it's
51:36 okay it works but like not the best user
51:38 experience and there are so many other
51:40 orchestrators right and they want to
51:42 learn one of them even though like 70%
51:45 of companies still stick to airflow and
51:47 I understand them like most banks still
51:50 stick to Java right even though there
51:51 are I don't know other languages yeah um
51:55 so in this case I do the scraping I see
51:57 that um these are the tools I don't know
52:00 Java airflow like all those things how
52:03 do I try
52:06 to also include like new things here
52:09 that may be not all use I would say I
52:12 would say you huh from time to time uh
52:15 you need to tick some boxes you know and
52:18 uh that's also what I did for example
52:20 with Azure so although I'm not currently
52:23 working on Azure but I got some feedback
52:25 from certain recruiters that yeah you
52:27 know like in Belgium a lot of companies
52:29 are using Azure and moving there and so
52:32 it's very good to have a certain
52:33 certification and so like okay I'm gonna
52:35 get some certification in aure so I
52:37 would say do at least the bare minimum
52:40 to understand a certain tool you don't
52:42 have to become an expert in in let's say
52:44 airf flow but how much time does it
52:46 really take to know something about
52:48 anlow a couple of days or playing with
52:51 it or something you can find that time
52:53 and then you can say I know something
52:55 you can do some kind of a course or
52:57 whatever and you check the
53:00 box it's like P Park
53:03 uh I think four out of five interviews
53:06 where I went they asked me about P spark
53:08 and they even had some kind of spark
53:10 clusters not always but let's say two
53:12 out of five times they had spark
53:14 clusters they always asked about P spark
53:17 but I never had to
53:19 do I don't know if I spent 1% of time
53:22 doing anything related to spark but it's
53:24 like oh do you have the box do you have
53:26 you said but it's not important but do
53:27 you have the box you know and so certain
53:30 it's it's a you know looking looking for
53:32 a job and and and getting through these
53:34 first stages of interviews it's like
53:36 kind of a game you know where you need
53:38 to just be compatible uh I know some
53:41 people are also I apply for a job which
53:44 is called a data scientist but the
53:47 description is for machine learning
53:49 engineer I see the description is for
53:50 machine learning engineering and I send
53:52 my CV where it says machine learning
53:54 engineer and they say but this is for
53:56 data
53:57 scientist okay I changed it to senior
54:00 data scientist I said okay now it's
54:02 good
54:04 yeah so so you have these situations
54:07 also and what trends do you see in the
54:10 future like do you see like certain
54:13 tools get interaction or like certain
54:15 things get
54:18 interaction I I I I really don't know
54:20 what to say I mean now it's all I think
54:23 99% of our attention is focused on llms
54:27 everybody that and I'm just thinking
54:29 like what are we ignoring why we're all
54:32 looking just at llms um I don't know I
54:36 think this is like the hottest field now
54:38 and everybody's investing in this and
54:40 and making chat Bots and and you still
54:41 see that there is still a lot of things
54:43 which are not which are not
54:46 um satisfying sorry maybe it's a problem
54:49 actually because like I don't know to
54:51 what extent it's a problem but many
54:52 companies who were doing mlop
54:54 observability or uh data observability
54:58 now they are positioning themselves as
55:00 llm observability tools right and then
55:04 it's like okay you have these mlops
55:07 tools and now mlops is not as cool
55:09 anymore like because um like if you want
55:13 to get a new round of investment then
55:16 you kind of have to be AI or llm or
55:18 whatever to get money from investors so
55:21 I understand why companies are kind of
55:23 trying to get a cut of this pie yeah
55:25 they're they're also taking the box
55:27 they're also this game but when it like
55:30 mlops is not dead like we still do mlops
55:32 we still talk about mlops it's just it
55:34 doesn't get as much attention as let's
55:35 say three years ago but still the
55:38 problem mlop solves these problems did
55:40 not go away we still problem indeed but
55:43 I think it's the same with people with
55:45 Al data engineering is much older than
55:47 than mlops engineering and still you
55:50 hear many senior data engineers and guys
55:52 saying that hey we're still facing with
55:54 the same issues you know with with data
55:57 quality lineage and so forth so yeah we
56:01 are not a fat anymore we're not the
56:03 popular
56:05 kids but still we have work to do you
56:07 know and uh I still did not see so my my
56:10 ideal when I was going into into machine
56:12 learning engineering because I I was
56:14 first data scientist and then I was like
56:15 okay I want to build something for the
56:18 data scientist that I was let say I
56:20 would like my former self I would like
56:22 to build something that my former self
56:24 would have an easier time with and I
56:26 still did not see companies which which
56:29 really made that a breeze you know you
56:33 know
56:36 so there is still still a lot to do and
56:38 with llm it's it's it's really I think
56:40 it's a really complicated problem you
56:42 see how many chat Bots you can hijack
56:44 and make it right code for you you know
56:46 like you want to buy something on an
56:48 e-commerce website and then suddenly you
56:50 can you can hijack it and make it say
56:52 whatever you want if you're clever
56:54 enough so there is still still a lot of
56:57 a lot of stuff there and honestly I I
56:59 did not just just knowing that I cannot
57:02 expect it to always give me a valid
57:04 Json makes me not want to use it at all
57:08 so I'm like this sounds too flaky you
57:11 know it's like going into having this
57:13 engineering mindset you know I want to
57:15 have things predictable working 100% all
57:17 the time repeatable unless somebody
57:19 pulls the plug on a server you know and
57:21 like just having to worry will the Ln
57:24 suddenly hallucinate and return I don't
57:26 know aaml instead of
57:27 adjacent you know call me back when you
57:30 when you when you do that when you
57:31 figure that out well interesting uh that
57:34 you mentioned that because machine
57:36 learning is Al is also not uh
57:39 deterministic but it's more
57:41 deterministic then at least we learned
57:43 how to make it uh reliable right we as
57:46 ml Engineers with LM we're still getting
57:49 there right yeah at least in the
57:50 classical machine learning at least the
57:52 the output is structured in the way I I
57:55 want it and I can control it but if I
57:57 just have to beg the llm please you
58:01 know there's a good meme like please man
58:04 like my career depends on it you know
58:06 just just give me a valid Json you know
58:09 so yeah
58:12 that's okay so maybe last question we
58:15 take a question from LCA you mentioned
58:18 that you have this on Prem experience
58:20 and most of the companies uh that you
58:22 worked at
58:24 corporations uh they we more like on
58:27 Prem than cloud and the question from
58:29 luuka is uh do you think that on Prem is
58:32 going to be the future for companies
58:34 that care about data privacy because we
58:36 talked about llm and with LM llms it's
58:39 also possible to host something
58:41 internally on Prem whatever um so do
58:44 they think like when it comes to data PR
58:46 privacy especially you worked in finance
58:49 and also in healthcare a little bit this
58:52 is a big thing there like data privacy
58:54 yeah yeah yeah indeed that's
58:56 one of the main reasons why they are
58:58 slow with going to the cloud yeah and
59:00 many of these companies are moving so I
59:03 said in all of them uh in the financial
59:06 industry they are mostly on premise and
59:08 moving to the cloud but they are very
59:11 careful with what they move to the cloud
59:14 you know and so it's uh something which
59:17 technically might is might maybe
59:19 possible to be done in a couple of
59:21 months they will drag it to a year or
59:23 two because of all the I I understand
59:26 necessary discussions about privacy
59:28 about encryption about whatever men in
59:30 the middle attack whatever can happen um
59:33 but there is also kind of I think it's
59:35 more than a year I think old this whole
59:37 um kind of a back to on Prem movement
59:40 there are many companies which decided
59:43 to ditch the cloud and go back to on
59:45 premise if if you have a good team of
59:47 Engineers which are able to do that uh
59:51 many companies have shown the guy that's
59:53 developed Ruby on Rails I forgot his
59:55 name d H H or something like that I
59:58 right he has a couple of blog posts of
1:00:01 how his company moved back to on premise
1:00:03 and millions they saved yeah right on
1:00:06 cloud costs so it's like with AWS Lambda
1:00:09 right so AWS Lambda is great when you
1:00:12 just want to uh you start you don't have
1:00:16 predictable um workload but then at some
1:00:19 point you need to move to like dedicated
1:00:21 machines that are up and running all the
1:00:23 time and the same with Cloud versus on
1:00:26 Prem I guess at some point you just
1:00:28 understand that if you just manage these
1:00:29 things yourself then it's cheaper in the
1:00:31 long run yeah yeah but you need to have
1:00:34 the knowledge to do it you know if you
1:00:36 just have a data scientist which is
1:00:38 using a low code platform he's not GNA
1:00:41 be able to run everything on premise you
1:00:44 know so yeah one last question quick one
1:00:48 um so you mentioned we talked about Bice
1:00:50 Park a little bit yeah uh and you said
1:00:53 that you didn't really need to work a
1:00:55 lot but still like in order to take Bo
1:00:58 minim but it was very important in every
1:01:01 interview I know it um like have you
1:01:03 used dusk do you think it's a good
1:01:05 alternative for distributed training
1:01:08 using dusk I tried it uh but locally
1:01:11 only on my at one point I had some some
1:01:14 parallel processing I had to do um and
1:01:17 in fact do I don't know what I did wrong
1:01:20 because it wasn't I didn't have a lot of
1:01:21 time I just like installed it and tried
1:01:23 to work with it to try to like chunk
1:01:25 this big data frame and and do the
1:01:26 processing in the end it was slower than
1:01:29 uh slower than just pandas you know okay
1:01:32 and so but I
1:01:33 assume there was something so U depends
1:01:36 on what are you doing are you like
1:01:37 merging something or depends on the
1:01:39 operation if you're just aggregating it
1:01:41 probably be faster uh but yeah it's
1:01:43 always like that I think I also have one
1:01:45 old blog post about it uh was it on
1:01:48 spark or on Ray or something like that
1:01:50 uh where yeah indeed when you have just
1:01:52 like groupy aggregate fine but if you
1:01:54 have just a small table which you merge
1:01:56 across a cluster or something it's a
1:01:58 complete complete disaster in terms of
1:02:00 performance so I desk is I know it's
1:02:04 around for a while um and I think they
1:02:07 also work in like a distributed manner
1:02:09 right I think you can use desk like
1:02:11 spark yeah uh but I did not see it used
1:02:14 around okay so usually companies still
1:02:17 go with spark if they need some
1:02:20 distributed indeed that that's what I
1:02:22 could see I did not see anybody using
1:02:24 desk uh but I experimented but with not
1:02:27 not with a lot of success doesn't mean
1:02:29 it's a bad tool just that I did not know
1:02:30 how to use my experience five years ago
1:02:33 was that it couldn't do group buy but I
1:02:35 think many things have changed since
1:02:37 then yeah so anyways thanks a lot sorry
1:02:41 for taking a little bit more of your
1:02:43 time but it was amazing uh was yeah it's
1:02:47 always great to have you here as a guest
1:02:49 and as you hinted at the beginning maybe
1:02:51 we can do this recurrent thing I don't
1:02:54 see anything wrong with that uh it's
1:02:56 always pleasure talking with you and
1:02:57 thanks for finding time to have this
1:03:00 chat and I'm looking forward to seeing
1:03:02 you sometime soon likewise yeah and
1:03:06 thanks everyone for stopping by for
1:03:09 being active um I hope you enjoyed it
1:03:11 and um yeah I'll see you soon bye
1:03:13 everyone