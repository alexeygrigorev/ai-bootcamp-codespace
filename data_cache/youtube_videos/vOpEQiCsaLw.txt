0:00 hi everyone Welcome to our event this
0:02 event is brought to you by data do club
0:04 which is a community of people who love
0:06 data and it's been like two years since
0:08 I updated this slide I really have to do
0:11 this but like the description is still
0:13 there and it's still the same so if you
0:15 want to find out more about the events
0:16 we have there's a link in the
0:18 description go there click on that link
0:21 and you'll see all the events we have in
0:23 our pipeline which includes another
0:25 event today about prompt engineering so
0:27 if you want to learn about uh how to
0:30 create prompts that work better than
0:32 like bad prompts I'm very bad at prompt
0:35 engineering and okay it's not important
0:38 for today's discussion but like check
0:39 the the events then this button looks
0:43 differently but I'm sure you'll find it
0:45 so if it still say subscribe you need to
0:47 click on that button so you get
0:50 subscribed to everything that is
0:52 happening on that channel on this
0:53 channel so you'll get notified about
0:55 future streams like the one we have
0:57 today and we have an amazing Slack
1:00 Community where you can hang out with
1:01 other dating toas so join that too and
1:06 during today's interview you can ask any
1:08 question you want there is a link a pin
1:11 link pinned Link in the live chat click
1:14 on that link ask your questions and we
1:16 will be covering these questions during
1:18 the
1:19 interview and I'm so lazy to just go and
1:22 make another
1:23 screenshot cuz like every time you need
1:25 to like the number of subscribers
1:27 changes and then you need to take the
1:30 screenshot right and then was it a shot
1:33 of coffee or something else that was
1:36 espresso yeah espresso okay cuz like
1:39 like this small glass looked like
1:41 something stronger oh okay um yeah are
1:47 you ready to start absolutely absolutely
1:51 ready okay so this week we'll talk about
1:54 building an open source data company and
1:56 not just building but U it's not the
1:58 first time we have Our Guest Adrian uh
2:01 on this podcast and before we spoke
2:04 about being a data freelancer so we will
2:08 talk
2:09 about building an open source company as
2:11 a data freelancer in the past I guess so
2:14 yeah the special guest we have today is
2:16 Adrian Adrian started working in data
2:19 quite some time ago in 2012 for berin
2:22 startups then he joined the corporation
2:26 and quickly found out that this is not
2:28 what he likes so then he decided to
2:30 freelance he freelanced for quite some
2:33 time and we have another interview with
2:34 Adrian as I mentioned where he talks
2:37 quite a lot about his experience but
2:40 today we invited Adrian again to talk
2:43 about his what happened after
2:46 freelancing and this is also a question
2:48 that many people think okay like now I
2:51 can do freelance but maybe I don't want
2:52 to do this forever what's next so today
2:54 we'll talk about that so welcome again
2:57 to our podcast
3:00 thank you
3:02 Alex yeah and the questions for today
3:05 interviews were prepared mostly by
3:07 Adrian but also Johanna helped so
3:09 Johanna always helps thanks Johanna and
3:11 I see you here in the chat so big heart
3:15 thanks for doing that and yeah let's
3:18 start so before we go into our main
3:21 topic of building and open source data
3:23 company let's start with your background
3:25 can you tell us about your career
3:26 Journey so far sure I just want to First
3:29 give a mention that actually the
3:32 questions prepared are thanks to yit in
3:35 case his in the audience who basically
3:39 asked me these questions last week and I
3:41 was able to just mostly use most of them
3:44 cool um a data engineer y I'm not sure
3:47 if he's chat right now okay
3:51 anyway what was the question you said
3:54 why did I stop freelancing or no the
3:56 question was for those who did not
3:58 listen to our previous podcast maybe you
4:00 can give us an overview of your career
4:02 Journey so far all right so as you were
4:05 saying uh I started working in data in
4:09 2012 um I started freelancing some five
4:13 six years ago right uh I've already
4:15 stopped by now and that was an amazing
4:18 uh change of Base from employment um
4:21 mostly because it gave me a lot of
4:23 autonomy and it uh allowed me to really
4:25 consider what I want to do with my life
4:27 and with my time and um also putting me
4:31 in the position where I was able to save
4:32 and invest uh which also opens up let's
4:35 say different chapters and options in
4:38 life right so um I would say um I was on
4:43 the freelancing path which I think is
4:45 entrepreneurial uh for about five years
4:48 time in which I had quite a few
4:50 learnings about what could be the next
4:53 step um and um yeah this is how we got
4:57 here and um
5:01 I would guess the next step the next
5:03 logical step for me was uh taking more
5:05 risk actually so looking into um how I
5:09 can invest my time better than just
5:14 freelancing and you freelancing uh as a
5:18 data engineer right yes I mean I did all
5:21 kinds of things because I tried to kind
5:23 of figure out uh what's interesting to
5:26 people what's interesting to me and one
5:28 of the things I was doing as a
5:30 freelancer was Data engineering of which
5:34 I would say maybe half of the things
5:35 were firsttime setups uh so commonly
5:38 called build and hire where you build
5:40 out a data warehouse and hire a team um
5:44 the other half I would say just generic
5:46 data engineering projects and um when I
5:50 wasn't doing data engineering I was
5:52 doing a little bit of Consulting so
5:54 basically how you should do your data
5:56 engineering more or less or how you
5:57 should structure your team
6:01 and for me freelancing is exchanging
6:03 time for money so the the image I have
6:06 in my head is like a company needs
6:08 somebody and then you say okay I charge
6:11 â‚¬ 100 per hour or like I don't know
6:14 th000 per day whatever like you say this
6:17 is how much you take and then they say
6:19 okay and then they say we hire you for
6:21 three months do this thing but I
6:24 remember that in our interview in the
6:26 previous one you also talked about other
6:29 things not just that but there are like
6:31 different kind of kinds of sorts of
6:34 freelancing where sometimes it's more
6:37 so maybe a company needs to build a
6:41 dater house and you say like okay like
6:43 for me alone is difficult but then I
6:45 have like my friends who can also join
6:48 and then instead of charging you per
6:50 hour I will charge you per project and
6:52 then it's more in preneurial right so
6:54 it's not like just give me 100 EUR and
6:57 I'll just sit there and then calculate
6:59 how many hours I spent but you say like
7:01 this is the problem you have this is the
7:03 solution I can provide and this is what
7:05 I need in exchange right so then it's
7:07 kind of like it's a bit different so you
7:09 more like provide a solution to the
7:12 problem rather than just sell your time
7:15 right and then for me it was already
7:16 quite entrepreneurial exactly so a
7:20 customer typically already wants to know
7:22 how much they're roughly going to pay
7:23 for what they get they don't actually
7:25 care about your hourly rate generally
7:27 they care about uh final outcome come
7:29 and what it cost them
7:33 mhm okay and you worked as a freelancer
7:36 sometime yes although like we talked
7:39 about like all these different kinds of
7:40 freelancing where you just exchange time
7:42 for money where you s sell projects
7:44 where you can bring your friends to help
7:46 you and so
7:47 on and like
7:49 why why did you want to do something
7:52 else like what triggered you to to to
7:54 change from cuz it was already like it
7:57 looked like you're already making like a
7:59 lot of
8:00 how to say impact that it can be quite
8:02 satisfying when it's not just when you
8:05 don't just exchange time for money you
8:07 also you know when you get paid by
8:11 delivering a project it's different can
8:14 be pretty fulfilling I guess it was so
8:17 um I can't complain about freelancing I
8:20 really enjoyed it and I still think it's
8:22 the let's say best lifestyle thing that
8:24 somebody can do so compared to
8:26 employment or compared to founding it's
8:28 probably the role where you have most
8:30 autonomy so if you are actually looking
8:33 to also have a holistic life and invest
8:37 in other areas that's a pretty good
8:39 position to be in htic life it's like
8:43 when you can go fish on Wednesday Go
8:46 Fish on Wednesday for example you can
8:48 decide every day uh what you're doing
8:50 more or less U of course you need to be
8:53 civilized and do it within the
8:55 boundaries of other people working with
8:56 you but uh you do have a lot of autonomy
8:59 and freedom um and I would say I enjoyed
9:03 that really much but there's always uh
9:06 you know something in the back of the
9:07 head that goes like okay I want more I
9:10 want different and once you do something
9:12 for a while at least for me it starts to
9:14 get boring and I have to say that um you
9:18 know I built a lot of data warehouses
9:20 and at some point it gets really old U
9:23 and of course when you are freelancing
9:25 people know you for what you do so um
9:29 they will offer you more of the same
9:31 work right and
9:35 um what I was doing in the later stages
9:38 of my freelancing was also
9:39 subcontracting right so like you were
9:41 describing a customer has a need and I
9:44 didn't have some of the skills to
9:45 deliver some of those things but I could
9:48 uh subcontract someone to help us
9:50 deliver um and I did that and then this
9:53 changes your role a little bit from um
9:56 single
9:57 contributor um where you have have a lot
9:59 of autonomy to more like an agency
10:02 manager where suddenly you have a lot
10:05 more communication um and a lot more
10:07 let's
10:08 say answering lines right so your
10:11 autonomy goes down uh your Revenue goes
10:14 up uh but uh I would say happiness also
10:18 went down for me uh when starting in
10:20 that direction so you know this
10:23 basically brings it to the question of
10:25 what next right more of the same gets
10:27 old um um and if you look into how to
10:30 improve things okay could go in the
10:32 agency Direction and make it a bigger
10:34 business but that doesn't seem fun
10:36 personally I don't know because like in
10:38 case of agency you would actually have a
10:41 company and then you would hire people
10:44 and then you would negotiate with
10:45 potential customers what you deliver and
10:48 then people from your agency go and work
10:51 right yes and it's a different business
10:53 at that point because it's not only
10:54 about you and your personal choices it's
10:57 about you know uh now you have have
10:59 employees and you have some
11:00 responsibilities around that you need to
11:02 make ends meet right because um you know
11:05 if you have an unpleasant customer it's
11:07 easy to fire them when you're a
11:08 freelancer you just go to a different
11:10 project but uh when you have a whole
11:12 team of people and you need to keep them
11:14 employed it becomes more
11:17 difficult and um yeah also managing the
11:21 flow of people it's a completely
11:23 different job uh fundamentally and uh
11:26 there's also let's say a question of
11:29 incentive right when you are personally
11:31 a freelancer it's quite easy to just be
11:34 aligned with your own system of values
11:36 whereas when you are owning an agency
11:39 and you have to pay the bills for the
11:42 people that you've hired um I would say
11:46 you start to have multiple
11:47 responsibilities some of which might
11:49 conflict directly with your values right
11:51 so you might have to work with the
11:54 customer for the good of your company uh
11:57 where you might not choose to work with
11:58 this customer
12:00 otherwise you might and that's one of
12:02 the potential next steps for a
12:04 freelancer for a solo freelancer so when
12:06 you're solo freelancer and you want to
12:09 like do something bigger agency is one
12:12 of the options but with all the pr and
12:14 cons we discussed PR be having more
12:17 money cons I guess like all these things
12:20 that you mentioned for some it might be
12:22 fun but like not everyone not for
12:24 everyone and then another option would
12:27 be creating a product right
12:29 yeah pretty
12:30 much so you could always go and do
12:33 something more esoteric uh that's
12:35 different from core freelancing you
12:37 could go build a product on your own but
12:40 that sounds pretty risky or you could go
12:43 down let's say the path of creating a
12:45 company because fundamentally I wanted
12:48 to build a product but in order to
12:51 enable making that happen um you need to
12:55 align multiple incentives with that
12:57 right so if I just want to build
12:59 something by myself in isolation for
13:01 nobody's benefit I can do that but if
13:04 you want things to end up in front of
13:06 people if you want them to be of a high
13:08 quality if you want people to help you
13:11 uh it's a different game and that's no
13:13 longer let's say the resource drain to
13:16 make something like this happen is more
13:18 than the effort of one person uh also on
13:21 the skills right
13:26 so okay but how like usually
13:29 you don't just wake up and okay now qu
13:31 freelancing let's try to build a product
13:35 right happens gradually right so there
13:37 is something you so that you do over and
13:39 over again right so I was telling you
13:42 about building data warehouses over and
13:44 over again and it does get pretty old
13:46 and I would say the reason why um I
13:50 didn't enjoy it anymore was that it's
13:53 not really challenging right the
13:55 technical challenge isn't high if you've
13:57 been a Daya engineer for a few years um
14:01 and then it's just a people problem and
14:03 it's kind of the same problems on repeat
14:05 um you know educating stakeholders that
14:08 total March that doesn't mean anything
14:11 and you need an actual metric educating
14:13 stakeholders that number of customers
14:17 means different things to different
14:18 teams and uh I can give an example where
14:21 I was done building a data warehouse
14:23 technically in two weeks and then we
14:25 spend two months to get everyone on the
14:27 same page as to what the customer is and
14:30 which ones they're tracking and which
14:32 ones they're reporting on it was
14:34 literally mindblowing um so what
14:38 happened for me was um I thought okay I
14:41 don't want to do the technical challenge
14:43 for me is easy to solve but what I
14:45 realized is that it's not easy for
14:47 everyone else on the team and so data
14:50 Engineers are often a bottleneck in
14:52 organizations and what I was looking in
14:55 my work of building and hiring was uh
14:58 always to empower others to take over
15:01 right it wasn't a game where I wanted to
15:03 be
15:04 the centerpiece of data engineering for
15:08 the next five years at this company so
15:10 in order to do that I was looking for
15:12 easy ways in which other people can take
15:14 on the engineering role and like I said
15:17 I think it's a pretty low complexity
15:19 role in terms of um technical
15:23 requirements um but it's not necessarily
15:27 easy to learn and to get there so if you
15:30 actually have everything available to
15:32 you in terms of uh such as boilerplate
15:35 code then you could just use it as a
15:37 data person and you don't need all the
15:39 engineering to happen so this is how the
15:41 product idea actually came to be which I
15:44 guess this is more or less what you were
15:45 asking
15:47 right well yeah more or less but yeah I
15:51 was curious like what exactly did you
15:53 see that you thought okay like so many
15:56 companies have this problem so if I put
16:00 the solution to this problem in a box
16:02 and then instead of selling my services
16:06 this
16:07 companies I I say okay this is the
16:09 solution and you can actually use this
16:12 Solution on your own you don't need me
16:14 just use the solution yes right so I can
16:17 give you some examples so you have a lot
16:18 of really smart people working in the
16:20 data field right now and even more smart
16:23 people not working in the data field and
16:25 wanting to so you have all this new
16:27 generation python users that you know
16:30 they're brilliant they were exposed to
16:32 programming languages earlier than the
16:35 rest of us and uh they've had
16:37 opportunities and chances that we dream
16:39 of sometimes that we had ourselves and U
16:43 they're uniquely positioned to be able
16:45 to solve these kinds of problems but
16:46 they need the right tools because they
16:48 don't have five years to develop the
16:50 engineering skills and learnings that it
16:52 might take for data engineer so uh what
16:55 I noticed was a few patterns such as
16:57 these python people can easily use
16:59 pandas and they can get some data from
17:03 an API they can use pandas to SQL to
17:05 load some data so fundamentally the
17:08 skills are there it's just about the
17:10 in-depth engineering knowledge that
17:12 isn't quite there and there was another
17:15 common enti pattern um people basically
17:18 just throwing Json strings into
17:20 databases so this happens quite
17:22 frequently and um the reason why people
17:25 do this is because they have a problem
17:27 and this is a solution right no one's
17:29 just being evil or shitty about code
17:31 quality um
17:34 so basically I thought okay we need some
17:36 good Dev tooling to help us do what
17:39 these people are trying to do and that
17:41 they're doing in a not engineering good
17:44 way uh to help them basically do it
17:46 faster better harder stronger right
17:49 so so from what I he from you and I I
17:53 know a bit about the the the product the
17:56 tool you work on so
17:59 uh so what I heard
18:01 is when you have a data warehouse you
18:04 usually need you don't just have it for
18:06 the sake of having it you need to put
18:07 some data in it right and then you have
18:10 a bunch of
18:13 Json Json data iing from end points or
18:16 from somewhere and then like you need to
18:20 take this Json data and put it into a
18:22 data warehouse or some sort of
18:24 database and the easiest way of doing
18:26 this is just take the Json as this and
18:29 put it I don't know to postgress because
18:31 in postgress you have this Json field
18:33 right or whatever and I think like all
18:35 the major data
18:37 houses can just you can just put dat in
18:40 there and then you can declare it as a
18:42 complex type or you can string and what
18:45 people were doing is naturally you have
18:47 this type you have a bunch of Json H
18:49 like the easiest way is just take the
18:51 Json and put it in the database right
18:54 not everyone knows that maybe it's not
18:56 the best solution but it kind of works
18:59 for now right so you saw that you saw
19:02 that people can actually do that so they
19:05 can use Python but this is not the best
19:09 thing to do for data warehouse cuz it's
19:11 expensive and then you don't want to
19:13 just put complex objects there because
19:15 it's more difficult to filter I guess
19:18 has many problems from cost maintenance
19:21 robustness and so on so you saw that and
19:24 you thought okay like what if there was
19:26 a tool that could just help them easily
19:29 enable them to do that and then like
19:32 instead of having a bunch of Json fields
19:34 in the database they have something
19:37 proper right yeah basically databases
19:40 like typed flat tables so for example
19:43 Jason doesn't have date time right so
19:45 when you load Json to a database you're
19:47 creating a datetime string kind of
19:49 you're just creating strings and then
19:51 somebody has to come and say this is a
19:54 time stamp let me extract it from the
19:55 Json let me give it the right type and
19:57 now we can can actually use it right so
20:00 I tried to kind of jump over these steps
20:02 so we don't have to have a human that is
20:04 manually guessing what each data type is
20:07 and unpacking this data and making it
20:09 clean so basically this tool that I was
20:13 working on uh facilitates just taking
20:16 unknown Json uh data and putting it in a
20:20 tabular relational format in the
20:21 database so I say relational because
20:24 Json can have substructures such as
20:27 lists within the Json which um you
20:30 cannot represent um you know within like
20:34 a simple type so you need to either
20:36 break it out into a new table or keep it
20:39 as some kind of array uh so you know
20:41 databas is like tables not arrays um and
20:45 this is kind of the idea it just makes
20:47 it easy um you have let's say the
20:50 declarative uh ways of loading like I
20:52 can replace I can append I can upsert or
20:55 merge the data um and you also have
20:58 let's say a lot of tweaks that data
21:00 Engineers care about that I won't really
21:02 go into a lot of details here but um you
21:05 know you put the Json in the database
21:07 but the data engineer will worry about
21:09 okay what's the distribution key what's
21:11 the I don't know primary key performance
21:14 considerations maybe I want a data
21:16 contract things like
21:19 that and from what I heard so you said
21:22 that people who are not necessarily
21:24 experienced data Engineers but no of in
21:26 Python can just take these Json
21:28 Jason and throw them into the data
21:32 warehouse but also if I'm an experienced
21:35 data
21:36 engineer this is kind of repetitive like
21:38 I have this bunch of Json files or Json
21:41 data and then I have to parse them think
21:44 okay like for this cuz it's nested I
21:46 need to create this table and this table
21:49 this is one to M relationship and then
21:51 like you spent a week just this Json
21:54 structure and creating a table structure
21:56 and then doing all the mapping like even
21:58 if you have experience it's kind
22:00 of repetitive like then you join another
22:05 company and then have the same problem
22:07 and you join another another company as
22:09 a freelancer and again they have the
22:11 same problem so it feels super
22:13 repetitive like right cuz you need to do
22:15 the same thing over and over again even
22:17 if you do it correctly like as a data
22:19 engineer you still end up like doing a
22:22 lot of stuff again and again yes and
22:25 ultimately correctly you know it's a
22:27 matter of best guess right because when
22:29 you're inferring types from a weekly
22:31 type data like Json uh you could be
22:34 wrong and you know there's nothing
22:36 preventing Json from sending you a
22:39 number today and a string tomorrow uh
22:41 Json doesn't have internally any kind of
22:44 type consistency between records so um
22:47 you want something that also reduces
22:49 maintenance because you know we can
22:51 guess what the data is but we might find
22:53 out we are wrong two days later when the
22:56 data doesn't load so we don't want to do
22:58 that and the more data you have the more
23:00 you try to avoid this typically and you
23:02 try to curate up front which generates a
23:05 whole another set of problems now you
23:07 have to talk to stakeholders and people
23:09 and it takes so much longer was it
23:13 born when you saw this pattern and you
23:17 wanted to solve this problem for clients
23:19 faster and that's why you created this
23:22 tool or it was you realized that there
23:25 is a pattern you stopped freelancing and
23:27 you focused on the tool
23:29 um it's a little more complex than that
23:32 so I was already building some kind of
23:34 data loading tool before um it's called
23:37 growth full stack it's something like a
23:39 five trend for a specific vertical um
23:42 and there I had the the pleasure you
23:45 know to play with the concept A little
23:46 bit so okay you have this side about
23:49 what is the right way
23:51 for taking something to people so they
23:54 can use it and then you have the
23:56 building side and how that could be and
23:58 how it should be so I would say it took
24:00 me some time to actually formulate some
24:03 stronger opinions about how it could be
24:05 built um and once we started building it
24:09 you know there's multiple layers of
24:11 abstractions of how you could build
24:13 something like this it could be built in
24:15 a way that Engineers love it or it could
24:17 be built in a way that uh any python
24:20 person can understand and usually to
24:22 reach these good abstractions uh you
24:25 might have some ideas but they're not
24:26 going to be the best right right you
24:28 want to validate them so we did a kind
24:31 of incremental process where we first
24:33 built an engine and with this engine we
24:35 started building pipelines getting
24:37 people's feedback seeing what people
24:38 could do or couldn't do um and then you
24:42 know uh we figured out we need to
24:44 simplify this and created another
24:46 another layer of abstraction on top to
24:49 enable the python users to just easily
24:51 use this MH and you said once we started
24:56 building it and he used we so who are we
25:00 who are you talking about so you
25:03 and my co-founders
25:06 yes on should I talk about them or yeah
25:09 I'm just curious like because like you
25:10 were a freelancer I guess you worked
25:13 with other Freelancers but like how did
25:15 you two met meet or like how did you
25:18 actually find each other and decided
25:20 okay like let's focus on solving this
25:22 problem so it's a classic story we met
25:25 it work right uh um so
25:30 um on my last project um basically the
25:34 guy that hired me um had been working
25:37 for this company for six years and he
25:40 had previously founded some companies
25:43 and um basically I ended up working with
25:45 him to build this growth full stack
25:47 solution that I was mentioning and um so
25:50 we actually had one year of working
25:52 together we had also worked together um
25:55 on some smaller projects before so so
25:58 like I went with him on a a Consulting
26:01 and sales trip to Poland for example to
26:03 sell this data engineering
26:06 solution um so I kind of realized okay I
26:10 can work with this person we can
26:12 communicate well and um um you know this
26:17 person so I'll just call him Matt
26:19 because his name is Matt uh so this
26:21 person Matt also had um founding
26:24 experience from before so myself
26:26 personally as a fre ancer I wouldn't
26:29 have jumped head first into all of this
26:31 founding chaos without some kind of
26:33 guidance so this was a good opportunity
26:37 and uh the rest of my team are basically
26:40 people with whom Matt has founded before
26:43 so there's Marin who's our technical
26:46 genius uh who's basically who very much
26:49 likes to hack things and figure out the
26:51 simplest ways and the most elegant ways
26:53 or esoteric sometimes um and there's
26:56 also Anna who joined in a more limited
27:00 capacity originally to just help us with
27:03 operations like registering the company
27:05 talking to the lawyers figuring out you
27:08 know all all these things kind
27:10 ofh okay um to before you started
27:15 getting people on board and uh and I
27:18 don't remember the other person met like
27:20 you wanted to know that this is the
27:23 right thing to do right like before
27:25 starting a company M like how did you
27:30 decide that this is what I actually want
27:32 to do like uh let's start a company
27:34 let's start getting money let's start
27:36 hiring people because it's a big
27:38 investment right yeah it's a big
27:40 investment and it's a complex decision
27:42 so I would say for myself I looked at it
27:45 from an entrepreneurial perspective and
27:47 I thought okay um I'm a freelancer
27:50 there's so much that can be done with
27:53 freelancing and I want to invest more
27:55 and as a freelancer you get actually to
27:57 earn a lot of money and um I had the
28:01 opportunity to learn about investment
28:04 and when you are investing there are
28:06 let's say multiple tiers of risk you
28:07 could take so you could buy a house and
28:10 rent it out and make maybe 1% per year
28:13 right um or you could buy an apartment
28:16 make maybe 3% per year or maybe you
28:18 could invest in the stock market you
28:20 take more chances you might earn more or
28:23 if you want to really go crazy you could
28:25 go into Angel Investing which is um you
28:29 know very high risk and high rewards so
28:32 sometimes it has a return of maybe 30%
28:34 per year um
28:36 statistically um and the next step would
28:39 be you know founding where you go all in
28:41 on something that's quite high risk and
28:43 of course also possibly High rewards so
28:46 this is in a way my way of
28:49 investing uh in a way that I was able to
28:52 in another way you know because I met
28:54 Matt um and this steam it was kind of
28:56 like the perfect opportunity to um go
29:00 down a path that they were already
29:02 familiar with making things much easier
29:04 to get it right so also having worked
29:07 with them before I had the understanding
29:11 that this is a group of people that I
29:13 can work with because probably when
29:15 founding when choosing co-founders one
29:17 of the most important things is um that
29:22 it's it's kind of like a family in the
29:24 sense that now you're bound together for
29:26 the next six years or something um and
29:30 you you will always need to figure out
29:33 solutions to problems if you don't uh
29:36 your problems will only grow right so I
29:39 knew that this is the right team to do
29:40 it
29:42 with and yeah the word investing that I
29:45 used when asking you about that question
29:47 I meant more like time investing but
29:48 interesting it's interesting that you
29:50 came from that angle so you can invest
29:52 like in a house in an apartment a Angel
29:56 Investing or just starting a company yes
29:57 I could have kept freelancing and
29:59 earning money and investing it right
30:03 so like I was this is where I was going
30:06 with that for a freelancer probably it's
30:10 a more natural thing to do as a next
30:13 step like one thing is agency and
30:15 another thing is building a
30:16 product and then you can not necessarily
30:20 see it as investment but more like okay
30:22 this is the next thing I do but also you
30:24 need to kind of put money there not kind
30:26 of but you actually have to put money
30:28 there otherwise yeah you need to eat
30:31 something right and then like probably
30:33 getting the first version and this is
30:36 something we should talk about that
30:38 right so how did you so we all humans
30:42 need to eat we need to live somewhere
30:44 right and this uh in the modern world it
30:47 costs money so how did you solve this
30:51 problem of you know finding something to
30:53 eat and place to sleep while you know
30:57 being being cuz you bootstrapped at the
30:59 end at the beginning right so you had
31:01 your own capital and of that Capital you
31:05 kind of worked right or how how did it
31:07 happen to you so basically when you
31:08 found a company you need to start it
31:10 with some Capital um then you know
31:14 there's your cost of living which I
31:15 would say
31:17 is moderate uh a moderate concern in the
31:20 sense that it's one of the costs that
31:23 you will incur um and then there is you
31:26 know cost of company operation because
31:29 ultimately you will want to do something
31:31 with that company and just keeping it
31:33 with some money in the bank and not
31:35 spending that money doesn't actually get
31:37 you anywhere what you want to do is
31:38 invest and have access to build things
31:41 so you also want to get some money into
31:43 the company so what we did was literally
31:46 for one year we didn't actually have a
31:48 job or a salary um so we just you know
31:52 lived on
31:53 savings um one of advantages that you
31:56 know the cost of living in Berlin is not
31:58 too high so um it's manageable if you
32:02 manage to save up AIT every month when I
32:05 pay my it gets worse yeah like I'm
32:10 almost crying like how expensive it
32:12 expensive compared to like I don't know
32:14 eight years ago of course like it's not
32:16 expensive compared to New York this was
32:19 also happening when we were building
32:21 this company and costs kept going up
32:23 like crazy I was like you know I had a
32:25 plan and that definitely not not able to
32:28 stick to it uh so it was definitely a
32:31 little bit stressful um luckily there
32:34 was still work to be found uh in the
32:37 market so at least we were able to earn
32:40 money into the company a little bit to
32:43 fund our operations so we basically you
32:46 know I told you that first we built an
32:48 engine so we use this Engine with design
32:51 Partners uh which also paid us for the
32:53 work um where you know we were able to
32:57 get some feedback um and also uh a
33:00 little bit of funding for our company so
33:02 you were
33:04 solving the problems they had and
33:07 building the two at the same time right
33:08 and because you were providing Services
33:11 they were paying you right yes so it was
33:13 like kind of freelancing in a way right
33:16 or like as a company you provided
33:18 services to them exactly it was kind of
33:21 like freelancing in the sense that I was
33:23 actually the only one directly involved
33:25 in these projects mostly
33:27 um and um you know the difference I
33:31 would say for me is that somebody else
33:32 was issuing the invoice for some other
33:34 entity mostly um but what was happening
33:37 was we got to actually test our tool
33:40 with real data and uh we also had some
33:43 really good learnings uh which
33:46 potentially could be worth more right in
33:48 the the prospect of a company building
33:50 than the little money that we got from
33:52 these Consulting
33:54 games but I guess this is not um you
33:57 cannot do it that much like there is
34:01 some money you earn some money from this
34:03 activity when you consult and then you
34:06 get money and you keep money in the
34:08 company to fund yourself to pay yourself
34:12 and other people salary pay for the
34:14 office right but that is probably not
34:17 enough right so you need to get more
34:19 money what we did in the first year
34:21 actually we squatted offices so uh as
34:24 you know um financial situation was
34:27 changing so a lot of companies basically
34:31 invest investors invested in them but
34:33 let's say 40x their early Revenue value
34:36 where 20x would be normal so when the
34:40 let's say mini crash came um lots of
34:43 investors basically either half the
34:45 investment or double the goal right to
34:47 get it back on track and what this did
34:50 was literally companies were forced to
34:52 let go of half of their stuff and um
34:57 unfortunately for them but fortunately
35:00 for us uh there were lots of let's say
35:03 empty rooms around the Berlin offices at
35:06 the time so we were able to uh use these
35:09 rooms without paying for rent which was
35:12 super that's why you said squatted yes
35:15 exactly uh we also didn't get they knew
35:18 that you were sitting there
35:20 right sorry the company knew that you
35:23 were sitting in it wasn't it wasn't like
35:27 occupy Berlin or anything um and uh we
35:31 also didn't pay ourselves a salary
35:33 because you know that wouldn't have been
35:34 realistically possible um so you know
35:38 pressure did increase at some point and
35:41 uh we had to raise a precede round um
35:45 this is this was happening around the
35:47 time when um we were creating also a
35:50 workshop for validation I think you
35:52 remember about that one because I was
35:54 asking you if I can recruit some testers
35:56 from your select
35:58 group did you recruit anyone yes so I
36:01 can tell you basically what happened was
36:03 we had this engine and we wanted to
36:08 figure out how to make a better
36:09 interface for this engine that any
36:11 python user could use um so around the
36:14 time we were actually also raising a
36:16 preed round it was quite chaotic but we
36:18 created this uh 3-day Workshop how to
36:21 build a pipeline in six hours so two
36:23 hours a day and we had some 60 people uh
36:27 join us and to our amazement they were
36:29 all able to build an incremental
36:31 pipeline uh back then it was Twitter API
36:34 now there's no more Twitter and there's
36:35 no more free API either so no different
36:40 times but uh then basically we realized
36:43 okay uh we have success with this
36:45 interface uh so this is what people can
36:48 use and they're willing to use and learn
36:51 kind of it's a shallow learning learning
36:53 curve enough that people just use it how
36:56 how did you so I guess people who came
36:58 to the workshop they came not
37:01 necessarily to give you the feedback on
37:04 the tool but more like learn how to
37:06 actually build uh pipelines right yes so
37:11 you showed how you showed them how to do
37:14 this but you also learned from how they
37:17 use it and can you tell us more about
37:20 this learning experience like how did
37:21 you actually design the workshop in such
37:23 a way that it was helpful for you too
37:26 not just for the attendees yeah that's
37:29 quite clever actually so what
37:32 um we had some help actually in
37:34 designing this uh um way of measuring
37:38 but one of the challenges was that when
37:41 you're teaching it's also hard to get
37:43 live feedback from people so I don't
37:44 know how you manage it but uh we figured
37:48 that we actually need two people uh when
37:50 teaching this course one is teaching and
37:52 the other is actually watching what the
37:53 people do and
37:55 helping and and uh basically the second
37:58 we had checkpoints for every day we had
38:01 something like 20 checkpoints so we
38:03 split the two hours into 10 segments and
38:07 we were asking people to uh react on
38:09 slack to the checkpoint message to say
38:12 okay if everyone has managed to do this
38:14 step please give an emoji to this slack
38:17 message so this way we could actually
38:19 see okay how many people have done it
38:22 right and we could how much time it took
38:24 right for each segment yeah we weren't
38:27 so much concerned about time we were
38:29 concerned if somebody doesn't get it
38:31 right and if they cannot do it and
38:34 ultimately we looked for completion
38:37 right but then the the role for the
38:39 person so one is teaching and then the
38:41 other one is observing and helping and
38:44 the one that was helping their task was
38:48 to understand to see the patterns right
38:51 so I don't know x% of students had
38:53 problems with that checkpoint with
38:56 completing that part of the task right
38:58 they were basically moderating right so
39:01 I was teaching and they were saying um
39:04 okay um enough people have finished this
39:07 step let's move on to the next uh
39:10 section uhuh so if somebody's late
39:13 sorry yeah I mean we waited right and uh
39:16 some people ask questions um they were
39:20 able to also get help live uh in so like
39:23 if they had some errors uh one important
39:25 aspect speaking of Errors was actually
39:27 preparing the workshop on a environment
39:30 that's the same for everyone so we
39:32 basically created like a code spaces
39:35 environment where everything was the
39:37 same so we had a pretty Cod spaces right
39:41 yeah uhuh okay we should use that for
39:44 our courses too so usually we just say
39:47 okay just rent an instance and this is
39:49 how you configure stuff on that
39:51 instance uh but then some of the
39:53 students came up with this idea of H we
39:55 can use codespace
39:57 but they took initiative so what you do
39:59 what you did is you realized okay this
40:01 thing is for free right or like it costs
40:04 but little at some point and everyone
40:07 has the same
40:08 environment that's smart and the task
40:12 was to get some Json data from Twitter
40:15 and build a warehouse of this data from
40:18 this data right it was basically to get
40:21 the data from Twitter um the people that
40:24 we were teaching were you know just
40:25 python users so many had not actually
40:27 done a web request so it was you know
40:29 also teaching them to extract the data
40:31 so with authentication pagination
40:35 concerns right so teaching kind of best
40:37 practices of how to do this and also
40:40 using the tool
40:42 itself and we didn't mention the name of
40:45 the tool right did we we
40:47 didn't so what's the tool yes it's a
40:51 pretty simple it's data load tool so DT
40:54 for short um
40:57 I often like to tell people don't think
40:59 of it as a data loading tool think of it
41:00 as a pipeline building Tool uh and the
41:03 reason for this is you know because it's
41:04 a developer tool made for developers to
41:07 build pipelines easily so while it does
41:09 load data um it does so because you
41:12 build a
41:14 pipeline okay that Workshop that we
41:17 talked about so I think DT already
41:21 existed when the workshop happened right
41:24 yes um basically at that point uh we had
41:28 just created this simple interface on
41:31 top of the engine but you know DLT what
41:34 is DT ultimately a product is a kind of
41:36 a moving Target what we didn't have at
41:38 the time were docks so you can imagine
41:41 that without docks a product is unusable
41:44 um I would say docks are just as much
41:46 part of the product as the code itself
41:49 um and at that point it was more like a
41:51 research phase it was very
41:54 early okay and as a result of that
41:57 Workshop like what did you learn
41:59 actually from this Workshop was it um we
42:02 learned less yeah we learned less than
42:05 we were hoping because basically the
42:07 workshop went we were expecting that
42:10 people would have problems with various
42:12 parts of the workshop and it turned out
42:15 that there were no problems so what we
42:17 did learn was that you know this is a
42:19 good abstraction for people to use that
42:21 is really easy to understand and the
42:24 next step is you know creating
42:26 that allow people to actually understand
42:29 what is happening and use it I see cuz
42:31 creating docs is a bck investment
42:35 because once you have the docks and you
42:37 change something in the tool you need to
42:39 redo all the docks
42:41 exactly and what you wanted to check
42:44 if the tool the obstructions you came up
42:49 with are good enough so you can start
42:51 building the docks
42:53 exactly how did you know that the
42:57 you need to do it this
42:59 way um it's not only about knowing it's
43:04 also you know you're limited in
43:06 bandwidth there's only so much you can
43:08 do and I can tell you it probably took
43:10 us three months before our docks were
43:13 actually at a level where uh people
43:16 were able to use them and another three
43:19 months before they were at the level
43:21 where people were saying hey your dogs
43:22 are pretty good um yeah quite a bit
43:27 negative feedback the purpose of this
43:30 Workshop was to help you you had limited
43:33 resources and the purpose of the
43:35 workshop was to help you figure out what
43:37 to do next product Market fit focus on
43:40 product market so either you focus on
43:43 making the engine better right now right
43:46 because like there are some checkpoints
43:47 there many people struggled or as it
43:50 turned out that there were no problems
43:53 with the actual code and then for you it
43:55 was the good signal that okay now it's
43:58 time to invest in docks right exactly so
44:01 the way you can think about it is uh
44:03 before you have product Market fit uh
44:06 which I guess I will have to explain
44:08 also what it is uh you should keep going
44:10 towards product Market fit so product
44:12 Market fit is basically a point where
44:14 your product is fitting the needs of the
44:17 market and you can generally tell by
44:19 increasing adoption and people really
44:21 wanting to use it right um they say that
44:25 one way to deter if you have product
44:27 Market fit is to take the solution away
44:28 and see if anyone cries if Nobody Cries
44:31 you don't have product Market fit um so
44:35 interesting how would you take away the
44:38 tool um now let's try to do the same
44:41 thing but without the
44:44 tool and you if you see how people react
44:47 right oh no I don't want to do
44:49 that back for example or you know you
44:53 one way is you don't need to ask you can
44:55 see that it's used for example at the
44:58 core of things right so for example we
45:00 have an early adopter that decided to
45:03 run the entire organization on DT the
45:05 entire data stack you know so if you
45:07 take it away um they're going to have to
45:10 figure out how to do something else but
45:12 it would be a big pain because uh you
45:15 know it solves a lot of problems
45:17 currently and that company that you
45:20 mentioned they knew you were an early
45:22 stage startup and you were just
45:24 experimenting with product Market featur
45:26 did they yet they decided to build to
45:30 put DLT at the core of their processes
45:33 like it's a bit risky right um it
45:36 depends who you are and how you perceive
45:38 risk right so if you're a software
45:40 engineer and you can analyze the code
45:42 base that is open source and you decide
45:45 that this is something that you know
45:47 looks good to you and that me meets your
45:50 criteria then it's easy to make a
45:51 decision because um you know you know if
45:55 something goes wrong long you can
45:56 maintain this and you can keep using
45:58 this like it's not just easier than
46:01 writing from scratch this thing right
46:03 you can just keep a clone uh a copy of
46:07 the code in your internal gitl whatever
46:11 and it's still easier than building a
46:15 similar thing from scratch and then
46:16 Engineers so valueing that because they
46:19 can just open this thing and see okay no
46:22 makes sense and then just use it but if
46:24 you're the kind of person who's rather
46:26 like a tool user like if you use a tool
46:28 like segment for example where you
46:30 expect that everything is done for you
46:32 and you just pay for it um then you know
46:35 this would be too early stage for such a
46:38 market so for open source it's different
46:42 cuz Engineers adopt a tool and then like
46:45 maybe the management don't care like as
46:47 long as the problem is solved yes also
46:50 depends on the engineer right because if
46:52 the engineer can handle the code base on
46:54 their own then they don't have a problem
46:56 but if you expect something to happen in
46:58 the future to the pro to the open source
47:00 project then you know might not be a
47:02 good
47:04 bad okay what do you actually do these
47:07 days and like at the beginning because
47:10 like you had a co-founder you had other
47:12 people so what did you do at the
47:15 beginning and how did your role change
47:17 over time so um my learning
47:22 about roles in a founding a company is
47:25 that it's very different uh compared to
47:28 what you think so while you might be
47:30 able to work in your strength in some
47:33 areas there will also be a lot of things
47:35 that need to be done in a company that
47:38 are nobody's strength and someone will
47:41 have to do them and it's going to be you
47:43 because you're the last line of defense
47:46 but maybe your co-founder can do this
47:48 yeah or my co-founders of course to
47:51 somebody you either you or or or him
47:54 right exactly and uh basically what this
47:57 means is that you need to figure out
48:00 what needs to happen next figure out
48:02 some kind of way to do it and then try
48:05 to get help to do more of it in a better
48:07 way um if that pays off kind of so I'm
48:10 doing a lot of things that are not in my
48:12 strength and kind of inventing um what
48:15 we should be doing um but I'm not trying
48:19 to reinvent any flat tires so I'm you
48:21 know taking lots of cues from other
48:23 people in the industry so to be specific
48:25 about what I'm doing right now um I'm
48:28 actually heading the go to market um and
48:33 uh strategy for our library which means
48:37 communicating let's say you could call
48:39 it
48:40 marketing um in a way that actually
48:44 helps the end user uh understand about
48:47 your product uh and that is aligned with
48:49 the strategy so specifically our
48:51 strategy is to go for bottom up adoption
48:54 we don't want to you know be the
48:56 solution that your non dat manager is
48:59 buying because they think it builds them
49:01 a warehouse and bakes them a cake we
49:03 want to be that actual developer tool
49:05 that you will come across and you will
49:08 go like wow this is so much better than
49:10 doing all this manual junk
49:12 myself and you as a data engineer or
49:15 former data engineer I don't know if you
49:17 can ever be former data engineer but you
49:19 as somebody who has done this many times
49:23 who can speak the same language as other
49:24 data engineers
49:26 you can explain what this thing is doing
49:30 right because you speak the same
49:31 language which makes you a good a
49:34 perfect fit for this position right yes
49:37 and you know things like identifying the
49:39 use cases for specific personas so for
49:42 example one of the like how do you reach
49:45 audiences right
49:47 um you could go to where these audiences
49:51 hang out so for example like on Reddit
49:53 or like in data engineering subreddit or
49:56 on your slack group um or you could go
49:59 to let's say other tool groups that
50:01 these people use right and then if you
50:03 go to this other tool group you want to
50:05 figure out okay do we have a use case
50:07 that this um audience is interested in
50:11 so you then you kind of need to figure
50:13 out what what they're doing what they
50:15 like how they think what problems they
50:17 have and then offer them a solution for
50:18 that so they can relate to to the
50:21 content and maybe try
50:23 it and maybe a good examp example I
50:26 recently came to your office you hosted
50:28 a Meetup with
50:30 ddb and I guess this is a good example
50:34 of other tool groups because you can
50:36 just hang out in the ddb slack and see
50:38 what kind of problems people have and
50:40 see if DLT can solve some of these
50:43 problems right and if it can then what
50:46 you actually do like hey have a look at
50:47 DLT or you just take note and then see
50:50 if you can improve these cases so I
50:53 would say do DB is a bit of a special
50:55 case because they have enabled us to do
50:58 something you know like U not slightly
51:01 better but zero to one so specifically
51:05 because we're a library that runs in a
51:06 notebook and so are they um this means
51:09 that we have the opportunity to run
51:11 together in places where uh data
51:14 pipelines and data Engineers previously
51:16 didn't go and uh this means we can for
51:19 example create a simple demo on a collab
51:21 that just runs um it enables lots of
51:24 easy test in and easy adoption for us
51:27 also for development right because DT
51:30 will generate schemas before the
51:32 database so if it's duct TB or something
51:35 else like big query DLT doesn't care
51:38 you'll have the same schema so you can
51:41 literally go for development between dub
51:43 and something else and yeah that event
51:46 you know we didn't do any content there
51:47 we just hosted it but um you know we
51:52 have a dock DB destination we have a
51:54 other dock destination and we are kind
51:56 of their recommended solution for
51:58 loading which is helping um and we also
52:02 the D DB users know that uh like they
52:06 they recommend DLT to
52:09 use come again I didn't get the question
52:12 oh you said that this is the recommended
52:14 solution so it means somewhere in the
52:15 documents they mention like if you have
52:17 this specific use case this specific
52:19 problem use
52:20 DT yes so there is I think there is
52:24 somewhere maybe I don't know if we're
52:26 actually mentioned in the documentation
52:28 but they did U distribute us to Their
52:31 audience like in the newsletter for
52:33 example um we have some demos we did
52:37 together
52:39 um yeah and any how did you convince
52:42 them to do this CU like this is
52:44 interesting it's what you have is mutual
52:47 Ben mutually
52:49 beneficial Partnership if I may to say
52:52 this way so you they help you cuz you
52:55 can run both things locally so you don't
52:57 need to set up big query
53:00 whatever and then for them you solve
53:03 some of the problems so then they can
53:05 easily see the benefits of ddb right so
53:08 how did you find this partnership and
53:10 how did
53:11 you actually not convince them but how
53:14 did they end up doing this mention like
53:16 did you ask them hey can you feature Us
53:19 in the newsletter or they themselves
53:21 wanted to do this or how did it work you
53:24 can think about this like dating right
53:26 so how how do you move on from dating to
53:31 marriage it's a it's a process it's not
53:33 a oneoff point right and um I would say
53:37 it was incremental so partly you know we
53:41 just added du DB because it was
53:42 beneficial for us so we added it as a
53:45 destination we started using it in our
53:47 demos then we came to them and told them
53:49 hey guys look uh it's a super useful
53:52 solution for us and we also align with
53:54 your product principles so our product
53:56 principle is uh among one of them is
54:00 being anti-platform so just being a
54:02 library that doesn't plan to take over
54:04 your entire stack um so this worked very
54:08 well also with dub because what this
54:11 means if you're not trying to take over
54:13 things it means you're trying to
54:14 integrate into things and it means that
54:17 you can have Healthy Partnerships with
54:19 the rest of the ecosystem which TB also
54:22 does very
54:24 well so what are your plans for the
54:28 future um so we are almost uh done
54:32 closing um uh fundraising round so this
54:36 kind of will open a new chapter in the
54:38 life of our company and that chapter
54:40 will be will include working on a paid
54:42 solution so like I was telling you about
54:45 go to market fit um what you want to do
54:49 for go to what you want to do before you
54:51 take money is find um product Market fit
54:54 because because if you don't do that
54:56 investors don't care about your product
54:58 Market fit they care about growth so um
55:02 they give you money because they want to
55:04 get more money in return right and if
55:06 they don't see how their money will
55:08 multiply then they will not give you the
55:10 money right yes it's very hard to raise
55:13 money for just research right so um
55:17 basically
55:19 we got uh product Market fit with our
55:22 library and now we're working towards a
55:24 paid solution and that paid solution
55:26 would be something complementary so it
55:28 wouldn't limit the library in any way it
55:30 would rather add to it so right now
55:33 we're basically working on uh user
55:35 research to figure out exact better what
55:37 this solution could be we have of course
55:39 some strong ideas but we want to
55:41 validate them before we just go out and
55:43 build things
55:45 um and uh there are some other let's say
55:49 open problems in the library space so
55:52 one of them is uh taking contribution
55:55 this is a hard problem because the
55:57 moment because basically a community
56:00 scale is different than a company so
56:03 there can be a lot more people in the
56:05 community but if you are open to
56:07 contributions and they have to go
56:09 through some company process you end up
56:11 being a bottleneck and this wouldn't
56:14 work basically it would put a lot of
56:15 burden on us that we can we wouldn't be
56:17 able to take at the moment so uh how to
56:20 solve this problem maybe llms will be
56:22 involved in the future uh um the other
56:26 problem that uh could be solved for the
56:29 library would be you know a lot of
56:31 people just want sources they don't want
56:33 to build a pipeline from stretch and
56:35 it's actually possible to generate many
56:37 of these sources but it's again not a
56:41 very easy problem not for everything and
56:43 it's also raising questions of you know
56:46 utility maintenance distribution and so
56:48 on so
56:50 maybe that you mean like let's say
56:53 there's tter API
56:55 when it existed but it's or GitHub API
56:58 right and then what you say is like you
57:01 select GitHub as a source somewhere you
57:03 select destination dub and then that's
57:07 kind of it right you don't do anything
57:09 yeah so we've done several experiments
57:11 in this Direction one of them is uh
57:14 there's an open API standard uh you
57:16 might have heard of swagger for example
57:19 Swagger dogs for apis so basically there
57:22 in this open API specification you have
57:25 almost all the information you need to
57:27 wrap a um an API so you could generate
57:31 the entire pipeline code from the
57:33 specification we actually have a demo on
57:35 our website where our CTO does that from
57:37 the Pokemon Pipeline and the generator
57:38 is quite smart it's only python rule
57:41 based there's no llm involved U but it
57:44 will do things like for example
57:46 understand that this is a list resource
57:48 and this is a detail resource and you
57:51 first need to list and then get the
57:53 detail for this entity or something like
57:55 that so it puts you in competition with
57:58 tools like airb right yeah I would say
58:02 they're a distant competitor um you know
58:06 what they do they have a bunch of
58:07 sources a bunch of destinations and then
58:09 like they connect so we don't really
58:12 want to go right airb is a platform
58:15 we'll never be a platform in that way so
58:18 um even if we do offer some kind of
58:20 orchestration that is not our selling
58:21 point uh we don't want to be another
58:23 five trend um and thereby currently is
58:27 kind of trying to be another five Trend
58:29 um there's the question of product
58:32 Market fit right so who's going to be
58:34 building and maintaining these pipelines
58:36 and I would say we don't really compete
58:38 with with air bite in that way also
58:40 because um their Builder is a UI focused
58:44 person uh on the programming side it's
58:46 really hard to build with air bite um
58:50 and we also don't want to you know put
58:53 this Source building necessarily on the
58:56 community if not needed and there are
58:58 multiple ways in which you can do this
59:01 so like I was telling you about the open
59:03 API standard but there's also you know
59:05 llms used for
59:07 generating and here we're actually
59:09 uniquely positioned as well because uh
59:12 if you use GPT with docks and uh DT
59:16 docks you can pretty easily get an nend
59:18 to end pipeline just by asking for
59:20 it um this is you know possible because
59:23 it's a library if if this was some kind
59:25 of monolitic application it would be
59:27 much
59:28 harder do you have time for one more
59:31 question mhm okay so can you recommend
59:35 any resource book or course or something
59:40 to our listeners about this topic so if
59:42 somebody wants to start what you did
59:45 create a product open source product
59:47 what can they from where can they
59:51 learn so unfortunately there are no
59:54 major are simple resources that give you
59:56 everything you need but I can recommend
59:59 uh reading about go to market um and
1:00:02 product Market fit so I read this book
1:00:05 uh called from survival to thrival um
1:00:08 the Enterprise product Market fit which
1:00:11 describes how you can go from um startup
1:00:14 to building an Enterprise ready product
1:00:16 kind of
1:00:18 um it's um you know for me as a data
1:00:21 engineer I never thought about things
1:00:24 that way and it was just a very big eye
1:00:26 opener for me to understand these topics
1:00:29 exist and I should consider them right
1:00:31 so I cannot necessarily recommend the
1:00:33 book as being the authority but it's
1:00:36 definitely good to educate yourself on
1:00:39 what is out
1:00:40 there from survival to thrival right yes
1:00:45 this is a like uh you know something for
1:00:47 dummies it's like a series of ook and
1:00:51 this one is about um product Market fit
1:00:56 okay yeah that's all we have time for
1:00:59 today so we are a bit like we took three
1:01:02 more minutes than we should have yeah
1:01:05 thanks a lot for joining us today and
1:01:07 sharing your experience I'm really
1:01:09 curious I think last time we had an
1:01:12 interview was two years ago maybe
1:01:14 slightly less so we should definitely
1:01:16 meet again maybe in year and a half to
1:01:19 and see what changed yes so yeah that
1:01:24 would be pretty interesting okay so
1:01:25 thanks again for joining us today and
1:01:27 thanks everyone for joining us today too
1:01:30 and yeah have a great week ahead thank
1:01:33 you you too Alex and see you on the
1:01:35 podcast in a couple of years yeah or
1:01:37 maybe earlier